{"version":3,"sources":["components/OpponentCard.js","components/ScoreDisplay.js","components/IdDisplay.js","components/OpponentRow.js","components/OpponentList.js","Utils.js","components/PlayingCardLabel.js","components/PlayerRow.js","components/YanivButton.js","components/ReadyButton.js","components/PlayerInput.js","components/DiscardPile.js","components/DrawStack.js","components/PlayArea.js","components/GameBoard.js","components/App.js","index.js"],"names":["OpponentCard","props","className","ScoreDisplay","score","IdDisplay","id","OpponentRow","opponentRow","player","hand","card","push","turn","paused","points","OpponentList","opponents","i","players","length","getCard","cardNumber","hearts","Array","from","keys","diamonds","_","clubs","spades","suit","number","includes","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","deal","numberOfPlayers","deck","buildHand","getPoints","numberOfCards","index","pop","getRandomInt","start","count","numberToValueMap","0","A","2","3","4","5","6","7","8","9","10","J","Q","K","getBestPlay","discardPile","playStyle","bestHand","matrix","suitMap","H","D","C","S","numberMap","suitIndex","numberIndex","getMatrix","cards","drawPile","getBestSet","bestRun","getBestRun","bestSet","bestSetPoints","bestRunPoints","topCard","topCardConverted","topCardValue","leftovers","filter","a","indexOf","bestLeftoversSet","bestLeftoversRun","console","log","jokers","totals","sort","b","bestCards","bestCardsWithJokers","concat","areCardsPlayable","highCard","value","v","sets","reduce","r","map","largestCombo","max","apply","highestIndex","mappedCards","newCard","sameNumbers","sameSuitsAndInSequence","isValid","areCardsSameNumber","numbers","numberOfJokers","diff","areCardsSameSuitAndInSequence","PlayingCardLabel","state","selected","this","isSelected","setState","onCardClick","suitDiv","render","mappedSuit","toLowerCase","onClick","handleCardClick","React","Component","PlayerRow","playerRow","YanivButton","ReadyButton","PlayerInput","bind","newSelectedCards","selectedCards","splice","onYanivClick","onReadyClick","handleYanivClick","handleReadyClick","errorMessage","DiscardPile","label","undefined","onDiscardPileClick","DrawStack","handleClick","onDrawStackClick","drawStack","PlayArea","GameBoard","game","startInterval","clearInterval","interval","setInterval","handleTimeout","handleAutoPlayClick","handlePlayClick","drawFromDiscardPile","playCards","drawFromDrawStack","slapDownCard","newDiscardPile","playerIndex","newPlayer","newPlayers","newCards","maxValue","getNextTurn","addCardToPlayerHand","newDrawStack","callYaniv","currentPlayerHand","bestPlay","yanivPlayer","asafCalled","opponent","gameOver","newDeal","handleDiscardPileClick","handleDrawStackClick","onAutoPlayClick","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.592f7d16.chunk.js","sourcesContent":["import React from 'react'\n\nfunction OpponentCard(props) {\n    // let card = getCard(props.card);\n\n    return (\n        <li><div className=\"card back\">*</div></li>\n    )\n}\n\nexport default OpponentCard\n","import React from 'react'\n\nfunction ScoreDisplay(props) {\n    return (\n        <div className=\"text-green-600 font-bold\">\n            {props.score}\n        </div>\n    )\n}\n\nexport default ScoreDisplay\n","import React from 'react'\n\nfunction IdDisplay(props) {\n    return (\n        <div>\n            {props.id}\n        </div>\n    )\n}\n\nexport default IdDisplay\n","import React from 'react'\nimport OpponentCard from './OpponentCard'\nimport ScoreDisplay from './ScoreDisplay'\nimport IdDisplay from './IdDisplay'\n// import {getCard} from \"../Utils\";\n\nfunction OpponentRow(props) {\n    let opponentRow = [];\n    for(let card of props.player.hand) {\n        opponentRow.push(<OpponentCard key={card} card={card}/>);\n    }\n\n    // let handDisplay = '';\n    // let card;\n    // for (let i = 0; i < props.player.hand.length; i++) {\n    //     card = getCard(props.player.hand[i]);\n    //     handDisplay += card.number + card.suit + ', ';\n    // }\n\n    return (\n        <div className=\"px-8\">\n            <div className=\"flex items-center justify-center p-3\">\n                {props.turn === props.player.turn\n                    ?\n                    <div className=\"bg-yellow-300\"><IdDisplay id={props.player.id}/></div>\n                    :\n                    <div className=\"\"><IdDisplay id={props.player.id}/></div>\n                }\n                <div className=\"pl-2\"><ScoreDisplay score={props.player.score} /></div>\n                {props.paused &&\n                    <span className=\"text-red-500 pl-2 font-bold\">{props.player.points}</span>\n                }\n            </div>\n            <div className=\"flex flex-wrap items-center playingCards faceImages simpleCards\">\n                <ul className=\"hand\">\n                    {opponentRow}\n                </ul>\n            </div>            \n            {/*<div>{handDisplay}</div>*/}\n        </div>\n    )\n}\n\nexport default OpponentRow","import React from 'react'\nimport OpponentRow from './OpponentRow'\n\nfunction OpponentList(props) {\n\n    let opponents = [];\n    for (let i = 0; i < props.players.length; i++) {\n        if (i === 0) {continue}\n        opponents.push(<OpponentRow paused={props.paused} key={i} player={props.players[i]} turn={props.turn} />)\n    }\n\n    return (\n        <div className=\"flex flex-wrap content-center\">\n            {opponents}\n        </div>\n    )\n}\n\nexport default OpponentList\n","export const getCard = (cardNumber) => {\n    const hearts = Array.from(Array(13).keys());\n    const diamonds = Array.from({length: 13}, (_, i) => i + 13);\n    const clubs = Array.from({length: 13}, (_, i) => i + 26);\n    const spades = Array.from({length: 13}, (_, i) => i + 39);\n    const jokers = [52, 53];\n\n    let suit = '';\n    let number = cardNumber;\n    if (hearts.includes(cardNumber)) {\n        suit = 'H';\n    } else if (diamonds.includes(cardNumber)) {\n        suit = 'D';\n        number = number - 13;\n    } else if (clubs.includes(cardNumber)) {\n        suit = 'C';\n        number = number - 26;\n    } else if (spades.includes(cardNumber)) {\n        suit = 'S';\n        number = number - 39;\n    } else if (jokers.includes(cardNumber)) {\n        suit = 'J';\n        number = '-1';\n    }\n\n    if (number === 0 ) {\n        number = 'A';\n    } else if (number === 10) {\n        number = 'J';\n    } else if (number === 11) {\n        number = 'Q';\n    } else if (number === 12) {\n        number = 'K';\n    } else if (number === -1) {\n        number = 0;\n    } else {\n        number++;\n    }\n\n    return {number: number, suit: suit}\n}\n\nexport const getCards = (cards) => {\n    let newCards = [];\n    for (let i = 0; i < cards.length; i++) {\n        newCards.push(getCard(cards[i]));\n    }\n    return newCards;\n}\n\nexport const shuffle = (array) => {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\nexport const deal = (numberOfPlayers) => {\n    // cars 52 and 53 are jokers\n    let deck = Array.from(Array(54).keys());\n    deck = shuffle(deck);\n\n    let players = [];\n    for (let i = 0; i < numberOfPlayers; i++) {\n        players.push({\n            id: 'Player ' + i,\n            score: 0,\n            hand: buildHand(5),\n            turn: i,\n            points: 0\n        })\n    }\n    for (let i = 0; i < players.length; i++) {\n        players[i].points = getPoints(players[i].hand);\n    }\n\n    function buildHand(numberOfCards) {\n        let hand = [];\n        for (let index = 0; index < numberOfCards; index++) {\n            hand.push(deck.pop());\n        }\n        return hand;\n    }\n\n    return {players: players, deck: deck};\n}\n\nexport const getRandomInt = (start, count) => {\n    // start = inclusive, end = exclusive\n    return Math.floor(Math.random() * count) + start;\n}\n\nconst  numberToValueMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 10, Q: 10, K: 10};\n\nexport const getPoints = (hand) => {\n    let points = 0;\n    for (let i = 0; i < hand.length; i++) {\n        let card = getCard(hand[i]);\n        let amount = numberToValueMap[card.number];\n        points += amount;\n    }\n    return points;\n}\n\nexport const getBestPlay = (hand, discardPile, playStyle) => {\n    let bestPlay;\n    let matrix = getMatrix(hand);\n\n    switch (playStyle) {\n        case 0:\n            // play single random card, pickup from draw stack\n            bestPlay = {\n                cards: [hand[getRandomInt(0, hand.length)]],\n                drawPile: 2\n            }\n            break;\n        case 1:\n            // play the best set (matching numbers) or highest card, pickup from draw stack\n            let bestSet = getBestSet(hand, matrix);\n            bestPlay = {\n                cards: bestSet,\n                drawPile: 2\n            }\n            break;\n        case 2:\n            // play the best run (3+ same suit and in order) or highest card, pickup from draw stack\n            let bestRun = getBestRun(hand, matrix);\n            if (bestRun.length === 0) {\n                bestRun = [hand[getRandomInt(0, hand.length)]];\n            }\n            bestPlay = {\n                cards: bestRun,\n                drawPile: 2\n            }\n            break;\n        default:\n            // play first card, pickup from draw stack\n            bestPlay = {\n                cards: [hand[0]],\n                drawPile: 2\n            }\n            break;\n    }\n\n    // play best run or best set (whichever seems better), pickup from discard pile if lower than 4\n    let bestHand;\n    let bestSet = getBestSet(hand, matrix);\n    let bestRun = getBestRun(hand);\n    let bestSetPoints = getPoints(bestSet);\n    let bestRunPoints = getPoints(bestRun);\n\n    if (bestSetPoints >= bestRunPoints) {\n        bestHand = bestSet;\n    } else {\n        bestHand = bestRun;\n    }\n\n    // determine drawPile\n    let drawPile = 2;\n    if (discardPile.length > 0) {\n        let topCard = discardPile[discardPile.length - 1];\n        let topCardConverted = getCard(topCard);\n        let topCardValue = numberToValueMap[topCardConverted.number];\n\n        let leftovers = hand.filter((a) => bestHand.indexOf(a) < 0);\n        leftovers = leftovers.push(topCard);\n\n        // take from discard pile if leftovers make up a set or a run, or if top card is less than 4\n        let bestLeftoversSet = getBestSet(leftovers, matrix);\n        let bestLeftoversRun = getBestRun(leftovers);\n        // console.log(getCards(bestLeftoversSet));\n        // console.log(getCards(bestLeftoversRun));\n        // console.log('bestLeftoversSet: ' + getCards(bestLeftoversSet) + ', bestLeftoversRun: ' + getCards(bestLeftoversRun));\n        if (bestLeftoversSet.length >= 2 && bestLeftoversSet.includes(topCard)) {\n            console.log('set lengths match: ' + bestLeftoversSet.length);\n            drawPile = 1;\n        } else if (bestLeftoversRun.length >= 3 && bestLeftoversSet.includes(topCard)) {\n            console.log('run lengths match: ' + bestLeftoversRun.length);\n            drawPile = 1;\n        } else if (topCardValue < 4) {\n            console.log('topCardValue match: ' + topCardValue);\n            drawPile = 1;\n        }\n    }\n\n    // console.log('bestSet: ' + bestSet + ' = ' + bestSetPoints + ' | ' +\n    //     'bestRun: ' + bestRun + ' = ' + bestRunPoints + ' | ' +\n    //     'bestPlay: '  + bestHand + ' = ' + getPoints(bestHand));\n    // console.log('--------------------')\n\n    bestPlay = {\n        cards: bestHand,\n        drawPile: drawPile\n    }\n\n    return bestPlay;\n}\n\nfunction getBestRun(hand) {\n    let hearts = [];\n    let diamonds = [];\n    let clubs = [];\n    let spades = [];\n    let jokers = [];\n\n    for (let i = 0; i < hand.length; i++) {\n        let card = getCard(hand[i]);\n        switch (card.suit) {\n            case \"H\":\n                hearts.push(hand[i]);\n                break;\n            case \"D\":\n                diamonds.push(hand[i]);\n                break;\n            case \"C\":\n                clubs.push(hand[i]);\n                break;\n            case \"S\":\n                spades.push(hand[i]);\n                break;\n            case \"J\":\n                jokers.push(hand[i]);\n                break;\n            default:\n                break;\n        }\n    }\n    \n    let totals = [hearts, diamonds, clubs, spades];\n    totals = totals.sort(((a, b) => b.length - a.length));\n    // totals = totals.filter(a => a.length === totals[0].length);\n\n    let bestCards = [];\n\n    for (let i = 0; i < totals.length; i++) {\n        let bestCardsWithJokers = totals[i].concat(jokers);\n        if (areCardsPlayable(totals[i])) {\n            bestCards = totals[i];\n            break;\n        } else if (jokers.length === 1 && areCardsPlayable(bestCardsWithJokers)) {\n            bestCards = bestCardsWithJokers;\n            break;\n        } else if (jokers.length === 2 && areCardsPlayable(totals[i].concat(jokers[0]))) {\n            bestCards = totals[i].concat(jokers[0]);\n            break;\n        } else if (jokers.length === 2 && areCardsPlayable(bestCardsWithJokers)) {\n            bestCards = bestCardsWithJokers;\n            break;\n        }\n    }\n\n    if (bestCards.length <= 1) {\n        let highCard = getCard(hand[0]);\n        let value = numberToValueMap[highCard.number];\n        bestCards = [hand[0]];\n        for (let i = 1; i < hand.length; i++) {\n            let card = getCard(hand[i]);\n            let v = numberToValueMap[card.number];\n            if (v > value) {\n                value = v;\n                bestCards = [hand[i]];\n            }\n        }\n    }\n\n    return bestCards;\n}\n\nfunction getBestSet(hand, matrix) {\n    let sum = (r, a) => r.map((b, i) => a[i] + b);\n    let sets = matrix.reduce(sum);\n    let largestCombo = Math.max.apply(Math, sets);\n    let highestIndex = 0;\n    for (let i = 0; i < sets.length; i++) {\n        if (sets[i] === largestCombo) {highestIndex = i}\n    }\n    let bestSet = []\n    let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\n    for (let i = 0; i < hand.length; i++) {\n        if (numberMap[getCard(hand[i]).number] === highestIndex) {bestSet.push(hand[i])}\n    }\n    return bestSet;\n}\n\nfunction getMatrix(hand) {\n\n    // A,2,3,4,5,6,7,8,9,10,J,Q,K,Joker\n    let matrix = [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    ];\n    let suitMap = {J: 0, H: 1, D: 2, C: 3, S: 4}\n    let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\n\n    for (let i = 0; i < hand.length; i++) {\n        let card = getCard(hand[i]);\n        let suitIndex = suitMap[card.suit];\n        let numberIndex = numberMap[card.number];\n        matrix[suitIndex][numberIndex]++;\n    }\n\n    return matrix;\n}\n\nexport const areCardsPlayable = (cards) => {\n    // requirements: single card || 3+ cards in order with same suit || 2+ cards with same number\n    let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\n    let mappedCards = [];\n    for (let i = 0; i < cards.length; i++) {\n        let newCard = getCard(cards[i]);\n        newCard.number = numberMap[newCard.number];\n        mappedCards.push(newCard);\n    }\n\n    let sameNumbers = false;\n    let sameSuitsAndInSequence = false;\n\n    if (mappedCards.length >= 2) {\n        sameNumbers = areCardsSameNumber(mappedCards);\n    }\n\n    if (mappedCards.length >= 3) {\n        sameSuitsAndInSequence = areCardsSameSuitAndInSequence(mappedCards);\n    }\n\n    let isValid = false;\n    if (cards.length === 1 || sameNumbers || sameSuitsAndInSequence) {isValid = true;}\n\n    return isValid;\n}\n\nfunction areCardsSameSuitAndInSequence(cards) {\n    let isValid = true;\n\n    // 3+ cards with same suit and in order\n    let suit = '';\n    for (let i = 0; i < cards.length; i++) {\n        if (cards[i].suit !== 'J') {suit = cards[i].suit; break;}\n    }\n    let numbers = [];\n    let numberOfJokers = 0;\n    for (let i = 0; i < cards.length; i++) {\n        if (cards[i].suit === 'J') {\n            numberOfJokers++;\n        } else if (cards[i].suit !== suit && cards[i].suit !== 'J') {\n            // console.log('suit dont match');\n            isValid = false;\n            break;\n        } else {\n            numbers.push(cards[i].number);\n        }\n    }\n\n    numbers = numbers.sort((a, b) => a - b);\n    for (let i = 1; i < numbers.length; i++) {\n        let diff = numbers[i] - numbers[i-1];\n        if (\n            (diff >= 4) ||\n            (diff === 3 && numberOfJokers < 2) ||\n            (diff === 2 && numberOfJokers < 1))\n        {\n            // console.log('not in sequence');\n            // console.log('numbers: ' + numbers);\n            // console.log(\n            //     (numbers[i - 1] !== numbers[i] - 1) + \", \" +\n            //     (numbers[i - 1] === numbers[i] - 2 && numberOfJokers < 1) + \", \" +\n            //     (numbers[i - 1] === numbers[i] - 3 && numberOfJokers < 2));\n            isValid = false;\n            break;\n        }\n    }\n\n    return isValid;\n}\n\nfunction areCardsSameNumber(cards) {\n    let isValid = true;\n\n    // 2+ cards of same number\n    let number = cards[0].number;\n    for (let i = 0; i < cards.length; i++) {\n        if (cards[i].number === 0) {continue;}\n        if (cards[i].number !== number) {\n            isValid = false;\n            break;\n        }\n    }\n\n    return isValid;\n}","import React from 'react';\nimport {getCard} from \"../Utils\";\n\nclass PlayingCardLabel extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: false\n        }\n    }\n\n    handleCardClick() {\n        if (this.props.paused) {return;}\n        let isSelected = !this.state.selected;\n        this.setState({selected: isSelected});\n        this.props.onCardClick(this.props.card);\n    }\n\n    render() {\n        const card = getCard(this.props.card);\n        const selected = this.state.selected;\n\n        let suitMap = {H: 'hearts', D: 'diams', C: 'clubs', S: 'spades', J: 'joker'};\n        let mappedSuit = suitMap[card.suit];\n        let className = \"selectable cursor-pointer card rank-\" + card.number + \" \" + mappedSuit;\n        if (this.props.card === 52) {\n            className += \" little\";\n        } else if (this.props.card === 53) {\n            className += \" big\";\n        }\n        className = className.toLowerCase();\n        let suitDiv;\n        switch (card.suit) {\n            case 'H':\n                suitDiv = <div className=\"suit\">&hearts;</div>;\n                break;\n            case 'D':\n                suitDiv = <div className=\"suit\">&diams;</div>;\n                break;\n            case 'C':\n                suitDiv = <div className=\"suit\">&clubs;</div>;\n                break;\n            case 'S':\n                suitDiv = <div className=\"suit\">&spades;</div>;\n                break;\n            case 'J':\n                suitDiv = <div className=\"suit\">Joker</div>;\n                break;\n            default:\n                break;\n        }\n\n        let render;\n        if (selected) {\n            // className += \" selected\";\n            render =\n                <strong>\n                    <label onClick={() => this.handleCardClick()} className={className}>\n                        <div className=\"rank\">{card.number}</div>\n                        {suitDiv}\n                    </label>\n                </strong>\n        } else {\n            render =\n                <div onClick={() => this.handleCardClick()} className={className}>\n                    <div className=\"rank\">{card.number}</div>\n                    {suitDiv}\n                </div>\n        }\n\n        return (\n            <div className=\"playingCards faceImages simpleCards\">\n                {render}\n            </div>\n        );\n    }\n}\n\nexport default PlayingCardLabel;","import React from 'react'\n// import PlayerCardButton from './PlayerCardButton'\nimport PlayerCardLabel from './PlayingCardLabel'\n\nfunction PlayerRow(props) {\n    let playerRow = [];\n\n    function handleCardClick(card) {\n        props.onCardClick(card);\n    }\n\n    for(let card of props.player.hand) {\n        // playerRow.push(<PlayerCardButton paused={props.paused} key={card} card={card} onCardClick={() => handleCardClick(card)} />);\n        playerRow.push(<PlayerCardLabel paused={props.paused} key={card} card={card} onCardClick={(card) => handleCardClick(card)} />);\n    }\n    \n    return (\n        <div className=\"flex flex-wrap items-center justify-center\" >\n            {playerRow}\n        </div>\n    )\n}\n\nexport default PlayerRow\n","import React from 'react'\n\nfunction YanivButton() {\n    return (\n        <div>\n            <button className=\"px-4 py-1 rounded-md text-white bg-purple-500 hover:bg-purple-600 focus:outline-none\">\n                Yaniv\n            </button>\n        </div>\n    )\n}\n\nexport default YanivButton\n","import React from 'react'\n\nfunction ReadyButton() {\n    return (\n        <div>\n            <button className=\"px-4 py-1 rounded-md text-white bg-blue-500 hover:bg-blue-600 focus:outline-none\">\n                Ready\n            </button>\n        </div>\n    )\n}\n\nexport default ReadyButton\n","import React from 'react'\nimport PlayerRow from './PlayerRow'\nimport YanivButton from './YanivButton'\nimport ScoreDisplay from './ScoreDisplay'\nimport IdDisplay from \"./IdDisplay\";\nimport {getPoints} from '../Utils.js'\nimport ReadyButton from \"./ReadyButton\";\n\nclass PlayerInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleCardClick = this.handleCardClick.bind(this);\n    }\n\n    handleCardClick(card) {\n        let newSelectedCards = this.props.selectedCards;\n        if (newSelectedCards.includes(card)) {\n            newSelectedCards.splice(newSelectedCards.indexOf(card), 1);\n        } else {\n            newSelectedCards.push(card);\n        }\n        this.props.onCardClick(newSelectedCards, card);\n    }\n\n    handleYanivClick() {\n        this.props.onYanivClick();\n    }\n\n    handleReadyClick() {\n        this.props.onReadyClick();\n    }\n\n    render() {\n        let points = getPoints(this.props.player.hand);\n\n        return (\n            <div className=\"flex flex-col\">                \n                <div className=\"flex items-center justify-center\">\n                    <PlayerRow selectedCards={this.props.selectedCards} paused={this.props.paused} player={this.props.player} onCardClick={(card) => this.handleCardClick(card)} />\n                </div>\n                <div className=\"flex items-center justify-center pt-6\">                    \n                    {this.props.turn === this.props.player.turn\n                        ?\n                        <div className=\"bg-yellow-300\"><IdDisplay id={this.props.player.id}/></div>\n                        :\n                        <div className=\"\"><IdDisplay id={this.props.player.id}/></div>\n                    }\n                    <span className=\"pl-2\"><ScoreDisplay score={this.props.player.score} /></span>\n                    {this.props.paused &&\n                        <span className=\"text-red-500 font-bold pl-2\">{this.props.player.points}</span>\n                    }\n                    {points <= 5 && !this.props.paused &&\n                        <div onClick={() => this.handleYanivClick()} className=\"pl-4\"><YanivButton /></div>\n                    }\n                    {this.props.paused &&\n                        <div onClick={() => this.handleReadyClick()} className=\"pl-4\"><ReadyButton/></div>\n                    }\n                </div>\n                <div className=\"pt-6 text-red-500\">{this.props.errorMessage}</div>\n            </div>\n        )\n    }    \n}\n\nexport default PlayerInput\n","import React from 'react'\nimport {getCard} from '../Utils.js'\n\nfunction DiscardPile (props) {\n\n    function handleClick() {\n        if (props.paused || props.discardPile === undefined || props.discardPile.length === 0) {return;}\n        props.onDiscardPileClick();\n    }\n\n    let card;\n    let mappedSuit;\n    let className;\n    let suitDiv;\n    let label\n    if (props.discardPile.length > 0) {\n        card = getCard(props.discardPile[props.discardPile.length - 1]);\n\n        let suitMap = {H: 'hearts', D: 'diams', C: 'clubs', S: 'spades', J: 'joker'};\n        mappedSuit = suitMap[card.suit];\n        className = \"selectable cursor-pointer card rank-\" + card.number + \" \" + mappedSuit;\n        if (props.discardPile[props.discardPile.length - 1] === 52) {\n            className += \" little\";\n        } else if (props.discardPile[props.discardPile.length - 1] === 53) {\n            className += \" big\";\n        }\n        className = className.toLowerCase();\n        switch (card.suit) {\n            case 'H':\n                suitDiv = <div className=\"suit\">&hearts;</div>;\n                break;\n            case 'D':\n                suitDiv = <div className=\"suit\">&diams;</div>;\n                break;\n            case 'C':\n                suitDiv = <div className=\"suit\">&clubs;</div>;\n                break;\n            case 'S':\n                suitDiv = <div className=\"suit\">&spades;</div>;\n                break;\n            case 'J':\n                suitDiv = <div className=\"suit\">Joker</div>;\n                break;\n            default:\n                break;\n        }\n        label = <div onClick={handleClick} className={className}>\n                    <div className=\"rank\">{card.number}</div>\n                    {suitDiv}\n                </div>\n    } else {\n        label = <div className=\"flex items-center justify-center text-sm w-16 h-20 mx-3 rounded-md bg-white border-4 border-gray-200 focus:outline-none\">\n                    discard pile\n                </div>\n    }\n\n    return (\n        <div className=\"playingCards faceImages simpleCards\">\n            {label}\n        </div>\n    )\n}\n\nexport default DiscardPile\n","import React from 'react'\n\nfunction DrawStack(props) {\n\n    function handleClick() {\n        // if (props.paused || props.drawStack === undefined || props.drawStack.length === 0) {\n        //     return;\n        // }\n        props.onDrawStackClick();\n    }\n\n    let label;\n    if (props.drawStack.length > 0) {\n        label = <div onClick={handleClick} className=\"selectable cursor-pointer card back\">*</div>;\n    } else {\n        label = <div onClick={handleClick} className=\"selectable cursor-pointer text-md flex items-center justify-center w-16 h-20 mx-3 rounded-md bg-white border-4 border-gray-200 hover:border-gray-300 focus:outline-none\">\n                    shuffle\n                </div>;\n    }\n\n    return (\n        <div className=\"playingCards faceImages simpleCards\">\n            {label}\n        </div>\n    )\n}\n\nexport default DrawStack\n","import React from 'react'\nimport DiscardPile from './DiscardPile'\nimport DrawStack from './DrawStack'\n\nfunction PlayArea(props) {\n\n    function handleDiscardPileClick() {\n        props.onDiscardPileClick();\n    }\n\n    function handleDrawStackClick() {\n        props.onDrawStackClick();\n    }\n\n    return (\n        <div>\n            <div className=\"flex justify-center align-center items-center\">\n                {/*<div className=\"pr-3\">Discard Pile ({props.discardPile.length})</div>*/}\n                <DiscardPile\n                    onDiscardPileClick={handleDiscardPileClick}\n                    discardPile={props.discardPile}\n                    paused={props.paused}\n                />\n                <DrawStack\n                    onDrawStackClick={handleDrawStackClick}\n                    drawStack={props.drawStack}\n                    paused={props.paused}\n                />\n                {/*<div className=\"pl-3\" >Draw Stack ({props.drawStack.length})</div>*/}\n            </div>\n        </div>\n    )\n}\n\nexport default PlayArea\n","import React from 'react'\nimport OpponentList from './OpponentList.js'\nimport PlayerInput from './PlayerInput.js'\nimport PlayArea from './PlayArea.js'\nimport {deal, shuffle, getRandomInt, getBestPlay, getPoints, areCardsPlayable, getCard} from '../Utils.js'\nimport '../css/cards.css';\nimport '../cards.css';\n\nclass GameBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        let game = deal(4);\n        this.state = {\n            players: game.players,\n            discardPile: [],\n            drawStack: game.deck,\n            turn: getRandomInt(0, game.players.length), // represents the deal index of the player whose turn it is\n            errorMessage: \"\",\n            selectedCards: [],\n            paused: false\n        }\n    }\n\n    componentDidMount() {\n        this.startInterval();\n    }\n\n    componentWillUnmount() {\n        this.clearInterval();\n    }\n\n    startInterval() {\n        this.clearInterval();\n        this.interval = setInterval(() => this.handleTimeout(), 1000);\n    }\n\n    clearInterval() {\n        clearInterval(this.interval)\n    }\n\n    handleTimeout() {\n        // 1 second = 1000\n        if (this.state.turn !== 0) {\n            this.handleAutoPlayClick()\n        } else {\n            this.clearInterval();\n        }\n    }\n\n    handleDiscardPileClick() {\n        if (this.state.discardPile.length === 0) {\n            return;\n        }\n\n        this.handlePlayClick(this.state.selectedCards, 0);\n    }\n\n    handleDrawStackClick() {\n        if (this.state.drawStack.length === 0) {\n            let discardPile = this.state.discardPile;\n            let topCard = discardPile.pop();\n            discardPile = shuffle(discardPile);\n            this.setState({\n                drawStack: discardPile,\n                discardPile: [topCard]\n            })\n            return;\n        }\n        this.handlePlayClick(this.state.selectedCards, 1);\n    }\n\n    handlePlayClick(cards, drawPile) {\n        if (this.state.players[0].turn !== this.state.turn) {\n            this.setState({errorMessage: \"not your turn\"})\n            return;\n        } else if (cards.length === 0) {\n            this.setState({errorMessage: \"you need to select cards to play\"})\n            return;\n        }\n\n        let isPlayable = areCardsPlayable(cards);\n        if (!isPlayable) {\n            this.setState({errorMessage: \"you can't play those cards\"})\n            return;\n        }\n\n        if (drawPile === 0) {\n            this.drawFromDiscardPile();\n            this.playCards(cards, this.state.players[this.state.turn]);\n        } else {\n            this.drawFromDrawStack();\n            this.playCards(cards, this.state.players[this.state.turn]);\n        }\n\n        this.setState({\n            selectedCards: []\n        })\n\n        this.startInterval();\n    }\n\n    handleCardClick(cards, card) {\n        // slap down if clicked card matches discard pile top card\n        if (this.state.discardPile.length > 0) {\n            let topCard = this.state.discardPile[this.state.discardPile.length - 1];\n            if (getCard(topCard).number === getCard(card).number && this.state.turn !== this.state.players[0].turn) {\n                this.slapDownCard(card, this.state.players[0]);\n                console.log('slap down');\n                return;\n            }\n        }\n\n        // console.log('selectedCards: ' + cards);\n        this.setState({selectedCards: cards})\n    }\n\n    slapDownCard(card, player) {\n        // add card to the discard pile\n        let newDiscardPile = this.state.discardPile;\n        newDiscardPile.push(card);\n\n        // remove cards from the player's hand\n        let playerIndex = this.state.players.indexOf(player);\n        let newPlayer = this.state.players[playerIndex];\n        newPlayer.hand.splice(newPlayer.hand.indexOf(card), 1);\n\n        newPlayer.points = getPoints(newPlayer.hand);\n\n        let newPlayers = this.state.players;\n        newPlayers[playerIndex] = newPlayer;\n\n        let newSelectedCards = this.state.selectedCards;\n        if (newSelectedCards.includes(card)) {\n            newSelectedCards.splice(newSelectedCards.indexOf(card), 1);\n        }\n\n        this.setState({\n            discardPile: newDiscardPile,\n            players: newPlayers,\n            errorMessage: \"\",\n            selectedCards: newSelectedCards\n        })\n    }\n\n    playCards(cards, player) {\n        // add cards to the discard pile\n        let newCards = cards;\n        if (cards.length > 1) {\n            // let mappedCards = cards.map((a, b) => getPoints([a]) - getPoints([b]));\n            // console.log(mappedCards);\n            let maxValue = Math.max.apply(Math, cards.map((a) => getPoints([a])));\n            for (let i = 0; i < newCards.length; i++) {\n                if (getPoints([newCards[i]]) === maxValue) {\n                    newCards.push(newCards.splice(i, 1)[0]);\n                    break;\n                }\n            }\n            // let convertedCards = getCards(newCards);\n            // console.log(convertedCards);\n        }\n\n        let newDiscardPile = this.state.discardPile;\n        newDiscardPile = newDiscardPile.concat(newCards);\n        // if (newCards.length > 1) {\n        //     console.log(getCards(newDiscardPile));\n        // }\n\n        // remove cards from the player's hand\n        let playerIndex = this.state.players.indexOf(player);\n        let newPlayer = this.state.players[playerIndex];\n\n        for (let i = 0; i < cards.length; i++) {\n            if (newPlayer.hand.includes(cards[i])) {\n                newPlayer.hand.splice(newPlayer.hand.indexOf(cards[i]), 1);\n            }\n        }\n\n        newPlayer.points = getPoints(newPlayer.hand);\n\n        let newPlayers = this.state.players;\n        newPlayers[playerIndex] = newPlayer;\n\n        this.setState({\n            discardPile: newDiscardPile,\n            players: newPlayers,\n            errorMessage: \"\",\n            turn: this.getNextTurn()\n        })\n    }\n\n    drawFromDiscardPile() {\n        let newDiscardPile = this.state.discardPile;\n        const card = newDiscardPile.pop();\n        this.addCardToPlayerHand(card, this.state.players[this.state.turn]);\n\n        this.setState({\n            discardPile: newDiscardPile\n        })\n    }\n\n    drawFromDrawStack() {\n        let newDrawStack = this.state.drawStack;\n        const card = newDrawStack.pop();\n        this.addCardToPlayerHand(card, this.state.players[this.state.turn]);\n\n        this.setState({\n            drawStack: newDrawStack\n        })\n    }\n\n    addCardToPlayerHand(card, player) {\n        let playerIndex = this.state.players.indexOf(player);\n        let newPlayer = this.state.players[playerIndex];\n\n        newPlayer.hand.push(card);\n\n        let newPlayers = this.state.players;\n        newPlayers[playerIndex] = newPlayer;\n\n        this.setState({\n            players: newPlayers\n        })\n    }\n\n    handleAutoPlayClick() {\n        if (this.state.drawStack.length === 0) {\n            this.setState({errorMessage: \"draw stack is empty\"});\n            return;\n        }\n\n        let player = this.state.players[this.state.turn];\n\n        // auto call yaniv for the current player\n        if (player.points <= 5) {\n            this.clearInterval();\n            this.callYaniv(player);\n            return;\n        }\n\n        // play the current player's \"best\" cards\n        let currentPlayerHand = player.hand;\n        const bestPlay = getBestPlay(currentPlayerHand, this.state.discardPile, 3);\n        bestPlay.drawPile === 1 ? this.drawFromDiscardPile() : this.drawFromDrawStack();\n        this.playCards(bestPlay.cards, player);\n    }\n\n    handleYanivClick() {\n        // TODO: eventually will need to replace 0 with id of client player\n        this.callYaniv(this.state.players[0]);\n    }\n\n    callYaniv(player) {\n        let yanivPlayer = player;\n\n        if (yanivPlayer.turn !== this.state.turn) {\n            this.setState({errorMessage: \"not your turn\"})\n            return;\n        }\n\n        let newPlayers = this.state.players;\n        let asafCalled = false;\n        for (let i = 0; i < newPlayers.length; i++) {\n            if (newPlayers[i] === yanivPlayer) {continue;}\n\n            let opponent = newPlayers[i];\n            if (opponent.points > yanivPlayer.points) {\n                opponent.score += opponent.points;\n            } else if (opponent.points <= yanivPlayer.points && !asafCalled) {\n                yanivPlayer.score += 35;\n                asafCalled = true;\n            }\n            newPlayers[i] = opponent;\n        }\n\n        // cut score in half if player reaches exactly 100 or 200\n        for (let i = 0; i < newPlayers.length; i++) {\n            if (newPlayers[i].score === 100 || newPlayers[i].score === 200) {\n                newPlayers[i].score = newPlayers[i].score / 2;\n            }\n        }\n\n        this.setState({\n            players: newPlayers,\n            paused: true\n        })\n    }\n\n    handleReadyClick() {\n\n        // check for game over\n        let gameOver = false;\n        for (let i = 0; i < this.state.players.length; i++) {\n            const player = this.state.players[i];\n            if (player.score > 200) {\n                gameOver = true;\n                break;\n            }\n        }\n\n        // deal cards\n        let newPlayers = this.state.players;\n        let newDeal = deal(4);\n        for (let i = 0; i < newDeal.players.length; i++) {\n            newPlayers[i].hand = newDeal.players[i].hand;\n            newPlayers[i].points = newDeal.players[i].points;\n            if (gameOver) {\n                newPlayers[i].score = 0;\n            } else if (newPlayers[i].score === 100 || newPlayers[i].score === 200) {\n                newPlayers[i].score = newPlayers[i].score / 2;\n            }\n        }\n\n        this.setState({\n            players: newPlayers,\n            discardPile: [],\n            drawStack: newDeal.deck,\n            turn: this.getNextTurn(),\n            paused: false,\n            selectedCards: []\n        })\n\n        // start interval\n        this.startInterval();\n    }\n\n    getNextTurn() {\n        let turn = this.state.turn;\n        turn + 1 >= this.state.players.length ? turn = 0 : turn = turn + 1;\n        return turn;\n    }\n\n    render() {\n        return (\n            <div className=\"flex items-center justify-center flex-col bg-white\">\n                <div className=\"border-b-2 p-8\">\n                    <OpponentList paused={this.state.paused} turn={this.state.turn} players={this.state.players} />\n                </div>\n                <div className=\"border-b-2 p-8\">\n                    <PlayArea\n                        discardPile={this.state.discardPile}\n                        drawStack={this.state.drawStack}\n                        onDiscardPileClick={() => this.handleDiscardPileClick()}\n                        onDrawStackClick={() => this.handleDrawStackClick()}\n                        paused={this.state.paused}\n                    />\n                </div>\n                <div className=\"p-8\">\n                    <PlayerInput\n                        onAutoPlayClick={() => this.handleAutoPlayClick()}\n                        player={this.state.players[0]}\n                        errorMessage={this.state.errorMessage}\n                        turn={this.state.turn}\n                        onCardClick={(cards, card) => this.handleCardClick(cards, card)}\n                        onYanivClick={() => this.handleYanivClick()}\n                        onReadyClick={() => this.handleReadyClick()}\n                        selectedCards={this.state.selectedCards}\n                        paused={this.state.paused}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default GameBoard\n","import '../css/App.css';\nimport GameBoard from './GameBoard.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">      \n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}