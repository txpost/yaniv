{"version":3,"sources":["components/OpponentCard.js","components/ScoreDisplay.js","components/IdDisplay.js","components/OpponentRow.js","components/OpponentList.js","Utils.js","components/PlayingCardLabel.js","components/PlayerRow.js","components/YanivButton.js","components/ReadyButton.js","components/PlayerInput.js","components/DiscardPile.js","components/DrawStack.js","components/PlayArea.js","components/GameBoard.js","components/App.js","index.js"],"names":["OpponentCard","props","className","ScoreDisplay","score","IdDisplay","id","OpponentRow","opponentRow","player","hand","card","push","turn","paused","points","OpponentList","opponents","i","players","length","getCard","cardNumber","hearts","Array","from","keys","diamonds","_","clubs","spades","suit","number","includes","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","deal","numberOfPlayers","deck","buildHand","getPoints","numberOfCards","index","pop","getRandomInt","start","count","numberToValueMap","0","A","2","3","4","5","6","7","8","9","10","J","Q","K","getBestPlay","discardPile","playStyle","bestHand","matrix","suitMap","H","D","C","S","numberMap","suitIndex","numberIndex","getMatrix","cards","drawPile","getBestSet","bestRun","getBestRun","bestSet","bestSetPoints","bestRunPoints","console","log","jokers","totals","sort","a","b","bestCards","bestCardsWithJokers","concat","areCardsPlayable","highCard","value","v","sets","reduce","r","map","largestCombo","max","apply","highestIndex","mappedCards","newCard","sameNumbers","sameSuitsAndInSequence","isValid","areCardsSameNumber","numbers","numberOfJokers","diff","areCardsSameSuitAndInSequence","PlayingCardLabel","state","selected","this","isSelected","setState","onCardClick","suitDiv","render","mappedSuit","toLowerCase","onClick","handleCardClick","React","Component","PlayerRow","playerRow","YanivButton","ReadyButton","PlayerInput","bind","newSelectedCards","selectedCards","splice","indexOf","onYanivClick","onReadyClick","handleYanivClick","handleReadyClick","errorMessage","DiscardPile","label","undefined","onDiscardPileClick","DrawStack","handleClick","onDrawStackClick","drawStack","PlayArea","GameBoard","game","startInterval","clearInterval","interval","setInterval","handleTimeout","handleAutoPlayClick","handlePlayClick","topCard","drawFromDiscardPile","playCards","drawFromDrawStack","newDiscardPile","playerIndex","newPlayer","newPlayers","getNextTurn","addCardToPlayerHand","newDrawStack","callYaniv","currentPlayerHand","bestPlay","yanivPlayer","asafCalled","opponent","newDeal","handleDiscardPileClick","handleDrawStackClick","onAutoPlayClick","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64b8f850.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction OpponentCard(props) {\r\n    // let card = getCard(props.card);\r\n\r\n    return (\r\n        <li><div className=\"card back\">*</div></li>\r\n    )\r\n}\r\n\r\nexport default OpponentCard\r\n","import React from 'react'\r\n\r\nfunction ScoreDisplay(props) {\r\n    return (\r\n        <div className=\"text-green-600 font-bold\">\r\n            {props.score}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreDisplay\r\n","import React from 'react'\r\n\r\nfunction IdDisplay(props) {\r\n    return (\r\n        <div>\r\n            {props.id}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IdDisplay\r\n","import React from 'react'\r\nimport OpponentCard from './OpponentCard'\r\nimport ScoreDisplay from './ScoreDisplay'\r\nimport IdDisplay from './IdDisplay'\r\n\r\nfunction OpponentRow(props) {\r\n    let opponentRow = [];\r\n    for(let card of props.player.hand) {\r\n        opponentRow.push(<OpponentCard key={card} card={card}/>);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"px-8\">\r\n            <div className=\"flex items-center justify-center p-3\">\r\n                {props.turn === props.player.turn\r\n                    ?\r\n                    <div className=\"bg-yellow-300\"><IdDisplay id={props.player.id}/></div>\r\n                    :\r\n                    <div className=\"\"><IdDisplay id={props.player.id}/></div>\r\n                }\r\n                <div className=\"pl-2\"><ScoreDisplay score={props.player.score} /></div>\r\n            </div>\r\n            <div className=\"flex flex-wrap items-center playingCards faceImages simpleCards\">\r\n                <ul className=\"hand\">\r\n                    {opponentRow}\r\n                </ul>\r\n            </div>\r\n            {props.paused &&\r\n                <div className=\"text-red-500 pt-2 px-2 font-bold\">{props.player.points}</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpponentRow","import React from 'react'\r\nimport OpponentRow from './OpponentRow'\r\n\r\nfunction OpponentList(props) {\r\n\r\n    let opponents = [];\r\n    for (let i = 0; i < props.players.length; i++) {\r\n        if (i === 0) {continue}\r\n        opponents.push(<OpponentRow paused={props.paused} key={i} player={props.players[i]} turn={props.turn} />)\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-wrap content-center\">\r\n            {opponents}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpponentList\r\n","export const getCard = (cardNumber) => {\r\n    const hearts = Array.from(Array(13).keys());\r\n    const diamonds = Array.from({length: 13}, (_, i) => i + 13);\r\n    const clubs = Array.from({length: 13}, (_, i) => i + 26);\r\n    const spades = Array.from({length: 13}, (_, i) => i + 39);\r\n    const jokers = [52, 53];\r\n\r\n    let suit = '';\r\n    let number = cardNumber;\r\n    if (hearts.includes(cardNumber)) {\r\n        suit = 'H';\r\n    } else if (diamonds.includes(cardNumber)) {\r\n        suit = 'D';\r\n        number = number - 13;\r\n    } else if (clubs.includes(cardNumber)) {\r\n        suit = 'C';\r\n        number = number - 26;\r\n    } else if (spades.includes(cardNumber)) {\r\n        suit = 'S';\r\n        number = number - 39;\r\n    } else if (jokers.includes(cardNumber)) {\r\n        suit = 'J';\r\n        number = '-1';\r\n    }\r\n\r\n    if (number === 0 ) {\r\n        number = 'A';\r\n    } else if (number === 10) {\r\n        number = 'J';\r\n    } else if (number === 11) {\r\n        number = 'Q';\r\n    } else if (number === 12) {\r\n        number = 'K';\r\n    } else if (number === -1) {\r\n        number = 0;\r\n    } else {\r\n        number++;\r\n    }\r\n\r\n    return {number: number, suit: suit}\r\n}\r\n\r\nexport const shuffle = (array) => {\r\n    let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nexport const deal = (numberOfPlayers) => {\r\n    // cars 52 and 53 are jokers\r\n    let deck = Array.from(Array(54).keys());\r\n    deck = shuffle(deck);\r\n\r\n    let players = [];\r\n    for (let i = 0; i < numberOfPlayers; i++) {\r\n        players.push({\r\n            id: 'Player ' + i,\r\n            score: 0,\r\n            hand: buildHand(5),\r\n            turn: i,\r\n            points: 0\r\n        })\r\n    }\r\n    for (let i = 0; i < players.length; i++) {\r\n        players[i].points = getPoints(players[i].hand);\r\n    }\r\n\r\n    function buildHand(numberOfCards) {\r\n        let hand = [];\r\n        for (let index = 0; index < numberOfCards; index++) {\r\n            hand.push(deck.pop());\r\n        }\r\n        return hand;\r\n    }\r\n\r\n    return {players: players, deck: deck};\r\n}\r\n\r\nexport const getRandomInt = (start, count) => {\r\n    // start = inclusive, end = exclusive\r\n    return Math.floor(Math.random() * count) + start;\r\n}\r\n\r\nconst  numberToValueMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 10, Q: 10, K: 10};\r\n\r\nexport const getPoints = (hand) => {\r\n    let points = 0;\r\n    for (let i = 0; i < hand.length; i++) {\r\n        let card = getCard(hand[i]);\r\n        let amount = numberToValueMap[card.number];\r\n        points += amount;\r\n    }\r\n    return points;\r\n}\r\n\r\nexport const getBestPlay = (hand, discardPile, playStyle) => {\r\n    let bestPlay;\r\n    let matrix = getMatrix(hand);\r\n\r\n    switch (playStyle) {\r\n        case 0:\r\n            // play single random card, pickup from draw stack\r\n            bestPlay = {\r\n                cards: [hand[getRandomInt(0, hand.length)]],\r\n                drawPile: 2\r\n            }\r\n            break;\r\n        case 1:\r\n            // play the best set (matching numbers) or highest card, pickup from draw stack\r\n            let bestSet = getBestSet(hand, matrix);\r\n            bestPlay = {\r\n                cards: bestSet,\r\n                drawPile: 2\r\n            }\r\n            break;\r\n        case 2:\r\n            // play the best run (3+ same suit and in order) or highest card, pickup from draw stack\r\n            let bestRun = getBestRun(hand, matrix);\r\n            if (bestRun.length === 0) {\r\n                bestRun = [hand[getRandomInt(0, hand.length)]];\r\n            }\r\n            bestPlay = {\r\n                cards: bestRun,\r\n                drawPile: 2\r\n            }\r\n            break;\r\n        default:\r\n            // play first card, pickup from draw stack\r\n            bestPlay = {\r\n                cards: [hand[0]],\r\n                drawPile: 2\r\n            }\r\n            break;\r\n    }\r\n\r\n    // play best run or best set (whichever seems better), pickup from draw stack\r\n    let bestHand;\r\n    let bestSet = getBestSet(hand, matrix);\r\n    let bestRun = getBestRun(hand);\r\n    let bestSetPoints = getPoints(bestSet);\r\n    let bestRunPoints = getPoints(bestRun);\r\n\r\n    if (bestSetPoints >= bestRunPoints) {\r\n        bestHand = bestSet;\r\n    } else {\r\n        bestHand = bestRun;\r\n    }\r\n\r\n    console.log('bestSet: ' + bestSet + ' = ' + bestSetPoints + ' | ' +\r\n        'bestRun: ' + bestRun + ' = ' + bestRunPoints + ' | ' +\r\n        'bestPlay: '  + bestHand + ' = ' + getPoints(bestHand));\r\n    console.log('--------------------')\r\n\r\n    bestPlay = {\r\n        cards: bestHand,\r\n        drawPile: 2\r\n    }\r\n\r\n    return bestPlay;\r\n}\r\n\r\nfunction getBestRun(hand) {\r\n    let hearts = [];\r\n    let diamonds = [];\r\n    let clubs = [];\r\n    let spades = [];\r\n    let jokers = [];\r\n\r\n    for (let i = 0; i < hand.length; i++) {\r\n        let card = getCard(hand[i]);\r\n        switch (card.suit) {\r\n            case \"H\":\r\n                hearts.push(hand[i]);\r\n                break;\r\n            case \"D\":\r\n                diamonds.push(hand[i]);\r\n                break;\r\n            case \"C\":\r\n                clubs.push(hand[i]);\r\n                break;\r\n            case \"S\":\r\n                spades.push(hand[i]);\r\n                break;\r\n            case \"J\":\r\n                jokers.push(hand[i]);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    let totals = [hearts, diamonds, clubs, spades];\r\n    totals = totals.sort(((a, b) => b.length - a.length));\r\n    // totals = totals.filter(a => a.length === totals[0].length);\r\n\r\n    let bestCards = [];\r\n\r\n    for (let i = 0; i < totals.length; i++) {\r\n        let bestCardsWithJokers = totals[i].concat(jokers);\r\n        if (areCardsPlayable(totals[i])) {\r\n            bestCards = totals[i];\r\n            break;\r\n        } else if (jokers.length === 1 && areCardsPlayable(bestCardsWithJokers)) {\r\n            bestCards = bestCardsWithJokers;\r\n            break;\r\n        } else if (jokers.length === 2 && areCardsPlayable(totals[i].concat(jokers[0]))) {\r\n            bestCards = totals[i].concat(jokers[0]);\r\n            break;\r\n        } else if (jokers.length === 2 && areCardsPlayable(bestCardsWithJokers)) {\r\n            bestCards = bestCardsWithJokers;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (bestCards.length <= 1) {\r\n        let highCard = getCard(hand[0]);\r\n        let value = numberToValueMap[highCard.number];\r\n        bestCards = [hand[0]];\r\n        for (let i = 1; i < hand.length; i++) {\r\n            let card = getCard(hand[i]);\r\n            let v = numberToValueMap[card.number];\r\n            if (v > value) {\r\n                value = v;\r\n                bestCards = [hand[i]];\r\n            }\r\n        }\r\n    }\r\n\r\n    return bestCards;\r\n}\r\n\r\nfunction getBestSet(hand, matrix) {\r\n    let sum = (r, a) => r.map((b, i) => a[i] + b);\r\n    let sets = matrix.reduce(sum);\r\n    let largestCombo = Math.max.apply(Math, sets);\r\n    let highestIndex = 0;\r\n    for (let i = 0; i < sets.length; i++) {\r\n        if (sets[i] === largestCombo) {highestIndex = i}\r\n    }\r\n    let bestSet = []\r\n    let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\r\n    for (let i = 0; i < hand.length; i++) {\r\n        if (numberMap[getCard(hand[i]).number] === highestIndex) {bestSet.push(hand[i])}\r\n    }\r\n    return bestSet;\r\n}\r\n\r\nfunction getMatrix(hand) {\r\n\r\n    // A,2,3,4,5,6,7,8,9,10,J,Q,K,Joker\r\n    let matrix = [\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n    ];\r\n    let suitMap = {J: 0, H: 1, D: 2, C: 3, S: 4}\r\n    let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\r\n\r\n    for (let i = 0; i < hand.length; i++) {\r\n        let card = getCard(hand[i]);\r\n        let suitIndex = suitMap[card.suit];\r\n        let numberIndex = numberMap[card.number];\r\n        matrix[suitIndex][numberIndex]++;\r\n    }\r\n\r\n    return matrix;\r\n}\r\n\r\nexport const areCardsPlayable = (cards) => {\r\n    // requirements: single card || 3+ cards in order with same suit || 2+ cards with same number\r\n    let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\r\n    let mappedCards = [];\r\n    for (let i = 0; i < cards.length; i++) {\r\n        let newCard = getCard(cards[i]);\r\n        newCard.number = numberMap[newCard.number];\r\n        mappedCards.push(newCard);\r\n    }\r\n\r\n    let sameNumbers = false;\r\n    let sameSuitsAndInSequence = false;\r\n\r\n    if (mappedCards.length >= 2) {\r\n        sameNumbers = areCardsSameNumber(mappedCards);\r\n    }\r\n\r\n    if (mappedCards.length >= 3) {\r\n        sameSuitsAndInSequence = areCardsSameSuitAndInSequence(mappedCards);\r\n    }\r\n\r\n    let isValid = false;\r\n    if (cards.length === 1 || sameNumbers || sameSuitsAndInSequence) {isValid = true;}\r\n\r\n    return isValid;\r\n}\r\n\r\nfunction areCardsSameSuitAndInSequence(cards) {\r\n    let isValid = true;\r\n\r\n    // 3+ cards with same suit and in order\r\n    let suit = '';\r\n    for (let i = 0; i < cards.length; i++) {\r\n        if (cards[i].suit !== 'J') {suit = cards[i].suit; break;}\r\n    }\r\n    let numbers = [];\r\n    let numberOfJokers = 0;\r\n    for (let i = 0; i < cards.length; i++) {\r\n        if (cards[i].suit === 'J') {\r\n            numberOfJokers++;\r\n        } else if (cards[i].suit !== suit && cards[i].suit !== 'J') {\r\n            // console.log('suit dont match');\r\n            isValid = false;\r\n            break;\r\n        } else {\r\n            numbers.push(cards[i].number);\r\n        }\r\n    }\r\n\r\n    numbers = numbers.sort((a, b) => a - b);\r\n    for (let i = 1; i < numbers.length; i++) {\r\n        let diff = numbers[i] - numbers[i-1];\r\n        if (\r\n            (diff >= 4) ||\r\n            (diff === 3 && numberOfJokers < 2) ||\r\n            (diff === 2 && numberOfJokers < 1))\r\n        {\r\n            // console.log('not in sequence');\r\n            // console.log('numbers: ' + numbers);\r\n            // console.log(\r\n            //     (numbers[i - 1] !== numbers[i] - 1) + \", \" +\r\n            //     (numbers[i - 1] === numbers[i] - 2 && numberOfJokers < 1) + \", \" +\r\n            //     (numbers[i - 1] === numbers[i] - 3 && numberOfJokers < 2));\r\n            isValid = false;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n}\r\n\r\nfunction areCardsSameNumber(cards) {\r\n    let isValid = true;\r\n\r\n    // 2+ cards of same number\r\n    let number = cards[0].number;\r\n    for (let i = 0; i < cards.length; i++) {\r\n        if (cards[i].number === 0) {continue;}\r\n        if (cards[i].number !== number) {\r\n            isValid = false;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n}","import React from 'react';\r\nimport {getCard} from \"../Utils\";\r\n\r\nclass PlayingCardLabel extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: false\r\n        }\r\n    }\r\n\r\n    handleCardClick(card) {\r\n        if (this.props.paused) {return;}\r\n        let isSelected = !this.state.selected;\r\n        this.setState({selected: isSelected});\r\n        this.props.onCardClick(card);\r\n    }\r\n\r\n    render() {\r\n        const card = getCard(this.props.card);\r\n        const selected = this.state.selected;\r\n\r\n        let suitMap = {H: 'hearts', D: 'diams', C: 'clubs', S: 'spades', J: 'joker'};\r\n        let mappedSuit = suitMap[card.suit];\r\n        let className = \"selectable cursor-pointer card rank-\" + card.number + \" \" + mappedSuit;\r\n        className = className.toLowerCase();\r\n        let suitDiv;\r\n        switch (card.suit) {\r\n            case 'H':\r\n                suitDiv = <div className=\"suit\">&hearts;</div>;\r\n                break;\r\n            case 'D':\r\n                suitDiv = <div className=\"suit\">&diams;</div>;\r\n                break;\r\n            case 'C':\r\n                suitDiv = <div className=\"suit\">&clubs;</div>;\r\n                break;\r\n            case 'S':\r\n                suitDiv = <div className=\"suit\">&spades;</div>;\r\n                break;\r\n            case 'J':\r\n                suitDiv = <div className=\"suit\">Joker</div>;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let render;\r\n        if (selected) {\r\n            // className += \" selected\";\r\n            render =\r\n                <strong>\r\n                    <label onClick={() => this.handleCardClick()} className={className}>\r\n                        <div className=\"rank\">{card.number}</div>\r\n                        {suitDiv}\r\n                    </label>\r\n                </strong>\r\n        } else {\r\n            render =\r\n                <div onClick={() => this.handleCardClick()} className={className}>\r\n                    <div className=\"rank\">{card.number}</div>\r\n                    {suitDiv}\r\n                </div>\r\n        }\r\n\r\n        return (\r\n            <div className=\"playingCards faceImages simpleCards\">\r\n                {render}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayingCardLabel;","import React from 'react'\r\n// import PlayerCardButton from './PlayerCardButton'\r\nimport PlayerCardLabel from './PlayingCardLabel'\r\n\r\nfunction PlayerRow(props) {\r\n    let playerRow = [];\r\n\r\n    function handleCardClick(card) {\r\n        props.onCardClick(card);\r\n    }\r\n\r\n    for(let card of props.player.hand) {\r\n        // playerRow.push(<PlayerCardButton paused={props.paused} key={card} card={card} onCardClick={() => handleCardClick(card)} />);\r\n        playerRow.push(<PlayerCardLabel paused={props.paused} key={card} card={card} onCardClick={() => handleCardClick(card)} />);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"flex flex-wrap items-center justify-center\" >\r\n            {playerRow}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerRow\r\n","import React from 'react'\r\n\r\nfunction YanivButton() {\r\n    return (\r\n        <div>\r\n            <button className=\"px-4 py-1 rounded-md text-white bg-purple-500 hover:bg-purple-600 focus:outline-none\">\r\n                Yaniv\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default YanivButton\r\n","import React from 'react'\r\n\r\nfunction ReadyButton() {\r\n    return (\r\n        <div>\r\n            <button className=\"px-4 py-1 rounded-md text-white bg-blue-500 hover:bg-blue-600 focus:outline-none\">\r\n                Ready\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReadyButton\r\n","import React from 'react'\r\nimport PlayerRow from './PlayerRow'\r\nimport YanivButton from './YanivButton'\r\nimport ScoreDisplay from './ScoreDisplay'\r\nimport IdDisplay from \"./IdDisplay\";\r\nimport {getPoints} from '../Utils.js'\r\nimport ReadyButton from \"./ReadyButton\";\r\n\r\nclass PlayerInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleCardClick = this.handleCardClick.bind(this);\r\n    }\r\n\r\n    handleCardClick(card) {\r\n        let newSelectedCards = this.props.selectedCards;\r\n        if (newSelectedCards.includes(card)) {\r\n            newSelectedCards.splice(newSelectedCards.indexOf(card), 1);\r\n        } else {\r\n            newSelectedCards.push(card);\r\n        }\r\n        this.props.onCardClick(newSelectedCards);\r\n    }\r\n\r\n    handleYanivClick() {\r\n        this.props.onYanivClick();\r\n    }\r\n\r\n    handleReadyClick() {\r\n        this.props.onReadyClick();\r\n    }\r\n\r\n    render() {\r\n        let points = getPoints(this.props.player.hand);\r\n\r\n        return (\r\n            <div className=\"flex flex-col\">\r\n                <div className=\"flex items-center justify-center\">\r\n                    <PlayerRow selectedCards={this.props.selectedCards} paused={this.props.paused} player={this.props.player} onCardClick={this.handleCardClick} />\r\n                </div>\r\n                <div className=\"flex items-center justify-center pt-6\">\r\n                    <span className=\"text-red-500 pr-2 font-bold\">{this.props.player.points}</span>\r\n                    <span className=\"pr-2\"><ScoreDisplay score={this.props.player.score} /></span>\r\n                    {this.props.turn === this.props.player.turn\r\n                        ?\r\n                        <div className=\"bg-yellow-300\"><IdDisplay id={this.props.player.id}/></div>\r\n                        :\r\n                        <div className=\"\"><IdDisplay id={this.props.player.id}/></div>\r\n                    }\r\n                    {points <= 5 && !this.props.paused &&\r\n                        <div onClick={() => this.handleYanivClick()} className=\"pl-4\"><YanivButton /></div>\r\n                    }\r\n                    {this.props.paused &&\r\n                        <div onClick={() => this.handleReadyClick()} className=\"pl-4\"><ReadyButton/></div>\r\n                    }\r\n                </div>\r\n                <div className=\"pt-6 text-red-500\">{this.props.errorMessage}</div>\r\n            </div>\r\n        )\r\n    }    \r\n}\r\n\r\nexport default PlayerInput\r\n","import React from 'react'\r\nimport {getCard} from '../Utils.js'\r\n\r\nfunction DiscardPile (props) {\r\n\r\n    function handleClick() {\r\n        if (props.paused || props.discardPile === undefined || props.discardPile.length === 0) {return;}\r\n        props.onDiscardPileClick();\r\n    }\r\n\r\n    let card;\r\n    let mappedSuit;\r\n    let className;\r\n    let suitDiv;\r\n    let label\r\n    if (props.discardPile.length > 0) {\r\n        card = getCard(props.discardPile[props.discardPile.length - 1]);\r\n\r\n        let suitMap = {H: 'hearts', D: 'diams', C: 'clubs', S: 'spades', J: 'joker'};\r\n        mappedSuit = suitMap[card.suit];\r\n        className = \"selectable cursor-pointer card rank-\" + card.number + \" \" + mappedSuit;\r\n        className = className.toLowerCase();\r\n        switch (card.suit) {\r\n            case 'H':\r\n                suitDiv = <div className=\"suit\">&hearts;</div>;\r\n                break;\r\n            case 'D':\r\n                suitDiv = <div className=\"suit\">&diams;</div>;\r\n                break;\r\n            case 'C':\r\n                suitDiv = <div className=\"suit\">&clubs;</div>;\r\n                break;\r\n            case 'S':\r\n                suitDiv = <div className=\"suit\">&spades;</div>;\r\n                break;\r\n            case 'J':\r\n                suitDiv = <div className=\"suit\">Joker</div>;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        label = <div onClick={handleClick} className={className}>\r\n                    <div className=\"rank\">{card.number}</div>\r\n                    {suitDiv}\r\n                </div>\r\n    } else {\r\n        label = <div className=\"flex items-center justify-center text-sm w-16 h-20 mx-3 rounded-md bg-white border-4 border-gray-200 focus:outline-none\">\r\n                    discard pile\r\n                </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"playingCards faceImages simpleCards\">\r\n            {label}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DiscardPile\r\n","import React from 'react'\r\n\r\nfunction DrawStack(props) {\r\n\r\n    function handleClick() {\r\n        // if (props.paused || props.drawStack === undefined || props.drawStack.length === 0) {\r\n        //     return;\r\n        // }\r\n        props.onDrawStackClick();\r\n    }\r\n\r\n    let label;\r\n    if (props.drawStack.length > 0) {\r\n        label = <div onClick={handleClick} className=\"selectable cursor-pointer card back\">*</div>;\r\n    } else {\r\n        label = <div onClick={handleClick} className=\"selectable cursor-pointer text-md flex items-center justify-center w-16 h-20 mx-3 rounded-md bg-white border-4 border-gray-200 hover:border-gray-300 focus:outline-none\">\r\n                    shuffle\r\n                </div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"playingCards faceImages simpleCards\">\r\n            {label}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrawStack\r\n","import React from 'react'\r\nimport DiscardPile from './DiscardPile'\r\nimport DrawStack from './DrawStack'\r\n\r\nfunction PlayArea(props) {\r\n\r\n    function handleDiscardPileClick() {\r\n        props.onDiscardPileClick();\r\n    }\r\n\r\n    function handleDrawStackClick() {\r\n        props.onDrawStackClick();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"flex justify-center align-center items-center\">\r\n                {/*<div className=\"pr-3\">Discard Pile ({props.discardPile.length})</div>*/}\r\n                <DiscardPile\r\n                    onDiscardPileClick={handleDiscardPileClick}\r\n                    discardPile={props.discardPile}\r\n                    paused={props.paused}\r\n                />\r\n                <DrawStack\r\n                    onDrawStackClick={handleDrawStackClick}\r\n                    drawStack={props.drawStack}\r\n                    paused={props.paused}\r\n                />\r\n                {/*<div className=\"pl-3\" >Draw Stack ({props.drawStack.length})</div>*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayArea\r\n","import React from 'react'\r\nimport OpponentList from './OpponentList.js'\r\nimport PlayerInput from './PlayerInput.js'\r\nimport PlayArea from './PlayArea.js'\r\nimport {deal, shuffle, getRandomInt, getBestPlay, getPoints, areCardsPlayable} from '../Utils.js'\r\nimport '../css/cards.css';\r\nimport '../cards.css';\r\n\r\nclass GameBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let game = deal(4);\r\n        this.state = {\r\n            players: game.players,\r\n            discardPile: [],\r\n            drawStack: game.deck,\r\n            turn: getRandomInt(0, game.players.length), // represents the deal index of the player whose turn it is\r\n            errorMessage: \"\",\r\n            selectedCards: [],\r\n            paused: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startInterval();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.clearInterval();\r\n    }\r\n\r\n    startInterval() {\r\n        this.clearInterval();\r\n        this.interval = setInterval(() => this.handleTimeout(), 500);\r\n    }\r\n\r\n    clearInterval() {\r\n        clearInterval(this.interval)\r\n    }\r\n\r\n    handleTimeout() {\r\n        // 1 second = 1000\r\n        if (this.state.turn !== 0) {\r\n            this.handleAutoPlayClick()\r\n        } else {\r\n            this.clearInterval();\r\n        }\r\n    }\r\n\r\n    handleDiscardPileClick() {\r\n        if (this.state.discardPile.length === 0) {\r\n            return;\r\n        }\r\n        this.handlePlayClick(this.state.selectedCards, 0);\r\n    }\r\n\r\n    handleDrawStackClick() {\r\n        if (this.state.drawStack.length === 0) {\r\n            let discardPile = this.state.discardPile;\r\n            let topCard = discardPile.pop();\r\n            discardPile = shuffle(discardPile);\r\n            this.setState({\r\n                drawStack: discardPile,\r\n                discardPile: [topCard]\r\n            })\r\n            return;\r\n        }\r\n        this.handlePlayClick(this.state.selectedCards, 1);\r\n    }\r\n\r\n    handlePlayClick(cards, drawPile) {\r\n        if (this.state.players[0].turn !== this.state.turn) {\r\n            this.setState({errorMessage: \"not your turn\"})\r\n            return;\r\n        } else if (cards.length === 0) {\r\n            this.setState({errorMessage: \"you need to select cards to play\"})\r\n            return;\r\n        }\r\n\r\n        let isPlayable = areCardsPlayable(cards);\r\n        if (!isPlayable) {\r\n            this.setState({errorMessage: \"you can't play those cards\"})\r\n            return;\r\n        }\r\n\r\n        if (drawPile === 0) {\r\n            this.drawFromDiscardPile();\r\n            this.playCards(cards, this.state.players[this.state.turn]);\r\n        } else {\r\n            this.drawFromDrawStack();\r\n            this.playCards(cards, this.state.players[this.state.turn]);\r\n        }\r\n\r\n        this.setState({\r\n            selectedCards: []\r\n        })\r\n\r\n        this.startInterval();\r\n    }\r\n\r\n    handleCardClick(cards) {\r\n        console.log('selectedCards: ' + cards);\r\n        this.setState({selectedCards: cards})\r\n    }\r\n\r\n    playCards(cards, player) {\r\n        // add cards to the discard pile\r\n        let newDiscardPile = this.state.discardPile;\r\n        newDiscardPile = newDiscardPile.concat(cards);\r\n\r\n        // remove cards from the player's hand\r\n        let playerIndex = this.state.players.indexOf(player);\r\n        let newPlayer = this.state.players[playerIndex];\r\n\r\n        for (let i = 0; i < cards.length; i++) {\r\n            if (newPlayer.hand.includes(cards[i])) {\r\n                newPlayer.hand.splice(newPlayer.hand.indexOf(cards[i]), 1);\r\n            }\r\n        }\r\n\r\n        newPlayer.points = getPoints(newPlayer.hand);\r\n\r\n        let newPlayers = this.state.players;\r\n        newPlayers[playerIndex] = newPlayer;\r\n\r\n        this.setState({\r\n            discardPile: newDiscardPile,\r\n            players: newPlayers,\r\n            errorMessage: \"\",\r\n            turn: this.getNextTurn()\r\n        })\r\n    }\r\n\r\n    drawFromDiscardPile() {\r\n        let newDiscardPile = this.state.discardPile;\r\n        const card = newDiscardPile.pop();\r\n        this.addCardToPlayerHand(card, this.state.players[this.state.turn]);\r\n\r\n        this.setState({\r\n            discardPile: newDiscardPile\r\n        })\r\n    }\r\n\r\n    drawFromDrawStack() {\r\n        let newDrawStack = this.state.drawStack;\r\n        const card = newDrawStack.pop();\r\n        this.addCardToPlayerHand(card, this.state.players[this.state.turn]);\r\n\r\n        this.setState({\r\n            drawStack: newDrawStack\r\n        })\r\n    }\r\n\r\n    addCardToPlayerHand(card, player) {\r\n        let playerIndex = this.state.players.indexOf(player);\r\n        let newPlayer = this.state.players[playerIndex];\r\n\r\n        newPlayer.hand.push(card);\r\n\r\n        let newPlayers = this.state.players;\r\n        newPlayers[playerIndex] = newPlayer;\r\n\r\n        this.setState({\r\n            players: newPlayers\r\n        })\r\n    }\r\n\r\n    handleAutoPlayClick() {\r\n        if (this.state.drawStack.length === 0) {\r\n            this.setState({errorMessage: \"draw stack is empty\"});\r\n            return;\r\n        }\r\n\r\n        let player = this.state.players[this.state.turn];\r\n\r\n        // auto call yaniv for the current player\r\n        if (player.points <= 5) {\r\n            this.clearInterval();\r\n            this.callYaniv(player);\r\n            return;\r\n        }\r\n\r\n        // play the current player's \"best\" cards\r\n        let currentPlayerHand = player.hand;\r\n        const bestPlay = getBestPlay(currentPlayerHand, this.state.discardPile, 3);\r\n        bestPlay.drawPile === 1 ? this.drawFromDiscardPile() : this.drawFromDrawStack();\r\n        this.playCards(bestPlay.cards, player);\r\n    }\r\n\r\n    handleYanivClick() {\r\n        // TODO: eventually will need to replace 0 with id of client player\r\n        this.callYaniv(this.state.players[0]);\r\n    }\r\n\r\n    callYaniv(player) {\r\n        let yanivPlayer = player;\r\n\r\n        if (yanivPlayer.turn !== this.state.turn) {\r\n            this.setState({errorMessage: \"not your turn\"})\r\n            return;\r\n        }\r\n\r\n        let newPlayers = this.state.players;\r\n        let asafCalled = false;\r\n        for (let i = 0; i < newPlayers.length; i++) {\r\n            if (newPlayers[i] === yanivPlayer) {continue;}\r\n\r\n            let opponent = newPlayers[i];\r\n            if (opponent.points > yanivPlayer.points) {\r\n                opponent.score += opponent.points;\r\n            } else if (opponent.points <= yanivPlayer.points && !asafCalled) {\r\n                yanivPlayer.score += 35;\r\n                asafCalled = true;\r\n            }\r\n            newPlayers[i] = opponent;\r\n        }\r\n\r\n        this.setState({\r\n            players: newPlayers,\r\n            paused: true\r\n        })\r\n    }\r\n\r\n    handleReadyClick() {\r\n\r\n        // deal cards\r\n        let newPlayers = this.state.players;\r\n        let newDeal = deal(4);\r\n        for (let i = 0; i < newDeal.players.length; i++) {\r\n            newPlayers[i].hand = newDeal.players[i].hand;\r\n            newPlayers[i].points = newDeal.players[i].points;\r\n        }\r\n\r\n        this.setState({\r\n            players: newPlayers,\r\n            discardPile: [],\r\n            drawStack: newDeal.deck,\r\n            turn: this.getNextTurn(),\r\n            paused: false,\r\n            selectedCards: []\r\n        })\r\n\r\n        // start interval\r\n        this.startInterval();\r\n    }\r\n\r\n    getNextTurn() {\r\n        let turn = this.state.turn;\r\n        turn + 1 >= this.state.players.length ? turn = 0 : turn = turn + 1;\r\n        return turn;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"flex items-center justify-center flex-col bg-white\">\r\n                <div className=\"border-b-2 p-8\">\r\n                    <OpponentList paused={this.state.paused} turn={this.state.turn} players={this.state.players} />\r\n                </div>\r\n                <div className=\"border-b-2 p-8\">\r\n                    <PlayArea\r\n                        discardPile={this.state.discardPile}\r\n                        drawStack={this.state.drawStack}\r\n                        onDiscardPileClick={() => this.handleDiscardPileClick()}\r\n                        onDrawStackClick={() => this.handleDrawStackClick()}\r\n                        paused={this.state.paused}\r\n                    />\r\n                </div>\r\n                <div className=\"p-8\">\r\n                    <PlayerInput\r\n                        onAutoPlayClick={() => this.handleAutoPlayClick()}\r\n                        player={this.state.players[0]}\r\n                        errorMessage={this.state.errorMessage}\r\n                        turn={this.state.turn}\r\n                        onCardClick={(cards) => this.handleCardClick(cards)}\r\n                        onYanivClick={() => this.handleYanivClick()}\r\n                        onReadyClick={() => this.handleReadyClick()}\r\n                        selectedCards={this.state.selectedCards}\r\n                        paused={this.state.paused}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameBoard\r\n","import '../css/App.css';\nimport GameBoard from './GameBoard.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">      \n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}