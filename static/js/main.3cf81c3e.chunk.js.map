{"version":3,"sources":["components/OpponentCard.js","components/ScoreDisplay.js","components/IdDisplay.js","components/OpponentRow.js","components/OpponentList.js","Utils.js","components/PlayingCardLabel.js","components/PlayerRow.js","components/YanivButton.js","components/ReadyButton.js","components/PlayerInput.js","components/DiscardPile.js","components/DrawStack.js","components/PlayArea.js","components/GameBoard.js","components/App.js","index.js"],"names":["OpponentCard","props","className","ScoreDisplay","score","IdDisplay","id","OpponentRow","opponentRow","player","hand","card","push","turn","paused","points","OpponentList","opponents","i","players","length","getCard","cardNumber","hearts","Array","from","keys","diamonds","_","clubs","spades","suit","number","includes","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","deal","numberOfPlayers","deck","buildHand","getPoints","numberOfCards","index","pop","getRandomInt","start","count","numberToValueMap","0","A","2","3","4","5","6","7","8","9","10","J","Q","K","getBestPlay","discardPile","playStyle","bestHand","matrix","suitMap","H","D","C","S","numberMap","suitIndex","numberIndex","getMatrix","cards","drawPile","getBestSet","bestRun","getBestRun","bestSet","bestSetPoints","bestRunPoints","topCard","topCardConverted","topCardValue","leftovers","filter","a","indexOf","console","log","newCards","getCards","bestLeftoversSet","bestLeftoversRun","jokers","totals","sort","b","bestCards","bestCardsWithJokers","concat","areCardsPlayable","highCard","value","v","sets","reduce","r","map","largestCombo","max","apply","highestIndex","mappedCards","newCard","sameNumbers","sameSuitsAndInSequence","isValid","areCardsSameNumber","numbers","numberOfJokers","diff","areCardsSameSuitAndInSequence","PlayingCardLabel","state","selected","this","isSelected","setState","onCardClick","suitDiv","render","mappedSuit","toLowerCase","onClick","handleCardClick","React","Component","PlayerRow","playerRow","YanivButton","ReadyButton","PlayerInput","bind","newSelectedCards","selectedCards","splice","onYanivClick","onReadyClick","handleYanivClick","handleReadyClick","errorMessage","DiscardPile","label","undefined","onDiscardPileClick","DrawStack","handleClick","onDrawStackClick","drawStack","PlayArea","GameBoard","game","startInterval","clearInterval","interval","setInterval","handleTimeout","handleAutoPlayClick","handlePlayClick","drawFromDiscardPile","playCards","drawFromDrawStack","newDiscardPile","playerIndex","newPlayer","newPlayers","getNextTurn","addCardToPlayerHand","newDrawStack","callYaniv","currentPlayerHand","bestPlay","yanivPlayer","asafCalled","opponent","newDeal","handleDiscardPileClick","handleDrawStackClick","onAutoPlayClick","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cf81c3e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction OpponentCard(props) {\r\n    // let card = getCard(props.card);\r\n\r\n    return (\r\n        <li><div className=\"card back\">*</div></li>\r\n    )\r\n}\r\n\r\nexport default OpponentCard\r\n","import React from 'react'\r\n\r\nfunction ScoreDisplay(props) {\r\n    return (\r\n        <div className=\"text-green-600 font-bold\">\r\n            {props.score}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreDisplay\r\n","import React from 'react'\r\n\r\nfunction IdDisplay(props) {\r\n    return (\r\n        <div>\r\n            {props.id}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IdDisplay\r\n","import React from 'react'\r\nimport OpponentCard from './OpponentCard'\r\nimport ScoreDisplay from './ScoreDisplay'\r\nimport IdDisplay from './IdDisplay'\r\n// import {getCard} from \"../Utils\";\r\n\r\nfunction OpponentRow(props) {\r\n    let opponentRow = [];\r\n    for(let card of props.player.hand) {\r\n        opponentRow.push(<OpponentCard key={card} card={card}/>);\r\n    }\r\n\r\n    // let handDisplay = '';\r\n    // let card;\r\n    // for (let i = 0; i < props.player.hand.length; i++) {\r\n    //     card = getCard(props.player.hand[i]);\r\n    //     handDisplay += card.number + card.suit + ', ';\r\n    // }\r\n\r\n    return (\r\n        <div className=\"px-8\">\r\n            <div className=\"flex items-center justify-center p-3\">\r\n                {props.turn === props.player.turn\r\n                    ?\r\n                    <div className=\"bg-yellow-300\"><IdDisplay id={props.player.id}/></div>\r\n                    :\r\n                    <div className=\"\"><IdDisplay id={props.player.id}/></div>\r\n                }\r\n                <div className=\"pl-2\"><ScoreDisplay score={props.player.score} /></div>\r\n            </div>\r\n            <div className=\"flex flex-wrap items-center playingCards faceImages simpleCards\">\r\n                <ul className=\"hand\">\r\n                    {opponentRow}\r\n                </ul>\r\n            </div>\r\n            {props.paused &&\r\n                <div className=\"text-red-500 pt-2 px-2 font-bold\">{props.player.points}</div>\r\n            }\r\n            {/*<div>{handDisplay}</div>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpponentRow","import React from 'react'\r\nimport OpponentRow from './OpponentRow'\r\n\r\nfunction OpponentList(props) {\r\n\r\n    let opponents = [];\r\n    for (let i = 0; i < props.players.length; i++) {\r\n        if (i === 0) {continue}\r\n        opponents.push(<OpponentRow paused={props.paused} key={i} player={props.players[i]} turn={props.turn} />)\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-wrap content-center\">\r\n            {opponents}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpponentList\r\n","export const getCard = (cardNumber) => {\r\n    const hearts = Array.from(Array(13).keys());\r\n    const diamonds = Array.from({length: 13}, (_, i) => i + 13);\r\n    const clubs = Array.from({length: 13}, (_, i) => i + 26);\r\n    const spades = Array.from({length: 13}, (_, i) => i + 39);\r\n    const jokers = [52, 53];\r\n\r\n    let suit = '';\r\n    let number = cardNumber;\r\n    if (hearts.includes(cardNumber)) {\r\n        suit = 'H';\r\n    } else if (diamonds.includes(cardNumber)) {\r\n        suit = 'D';\r\n        number = number - 13;\r\n    } else if (clubs.includes(cardNumber)) {\r\n        suit = 'C';\r\n        number = number - 26;\r\n    } else if (spades.includes(cardNumber)) {\r\n        suit = 'S';\r\n        number = number - 39;\r\n    } else if (jokers.includes(cardNumber)) {\r\n        suit = 'J';\r\n        number = '-1';\r\n    }\r\n\r\n    if (number === 0 ) {\r\n        number = 'A';\r\n    } else if (number === 10) {\r\n        number = 'J';\r\n    } else if (number === 11) {\r\n        number = 'Q';\r\n    } else if (number === 12) {\r\n        number = 'K';\r\n    } else if (number === -1) {\r\n        number = 0;\r\n    } else {\r\n        number++;\r\n    }\r\n\r\n    return {number: number, suit: suit}\r\n}\r\n\r\nexport const getCards = (cards) => {\r\n    let newCards = [];\r\n    for (let i = 0; i < cards.length; i++) {\r\n        newCards.push(getCard(cards[i]));\r\n    }\r\n    return newCards;\r\n}\r\n\r\nexport const shuffle = (array) => {\r\n    let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nexport const deal = (numberOfPlayers) => {\r\n    // cars 52 and 53 are jokers\r\n    let deck = Array.from(Array(54).keys());\r\n    deck = shuffle(deck);\r\n\r\n    let players = [];\r\n    for (let i = 0; i < numberOfPlayers; i++) {\r\n        players.push({\r\n            id: 'Player ' + i,\r\n            score: 0,\r\n            hand: buildHand(5),\r\n            turn: i,\r\n            points: 0\r\n        })\r\n    }\r\n    for (let i = 0; i < players.length; i++) {\r\n        players[i].points = getPoints(players[i].hand);\r\n    }\r\n\r\n    function buildHand(numberOfCards) {\r\n        let hand = [];\r\n        for (let index = 0; index < numberOfCards; index++) {\r\n            hand.push(deck.pop());\r\n        }\r\n        return hand;\r\n    }\r\n\r\n    return {players: players, deck: deck};\r\n}\r\n\r\nexport const getRandomInt = (start, count) => {\r\n    // start = inclusive, end = exclusive\r\n    return Math.floor(Math.random() * count) + start;\r\n}\r\n\r\nconst  numberToValueMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 10, Q: 10, K: 10};\r\n\r\nexport const getPoints = (hand) => {\r\n    let points = 0;\r\n    for (let i = 0; i < hand.length; i++) {\r\n        let card = getCard(hand[i]);\r\n        let amount = numberToValueMap[card.number];\r\n        points += amount;\r\n    }\r\n    return points;\r\n}\r\n\r\nexport const getBestPlay = (hand, discardPile, playStyle) => {\r\n    let bestPlay;\r\n    let matrix = getMatrix(hand);\r\n\r\n    switch (playStyle) {\r\n        case 0:\r\n            // play single random card, pickup from draw stack\r\n            bestPlay = {\r\n                cards: [hand[getRandomInt(0, hand.length)]],\r\n                drawPile: 2\r\n            }\r\n            break;\r\n        case 1:\r\n            // play the best set (matching numbers) or highest card, pickup from draw stack\r\n            let bestSet = getBestSet(hand, matrix);\r\n            bestPlay = {\r\n                cards: bestSet,\r\n                drawPile: 2\r\n            }\r\n            break;\r\n        case 2:\r\n            // play the best run (3+ same suit and in order) or highest card, pickup from draw stack\r\n            let bestRun = getBestRun(hand, matrix);\r\n            if (bestRun.length === 0) {\r\n                bestRun = [hand[getRandomInt(0, hand.length)]];\r\n            }\r\n            bestPlay = {\r\n                cards: bestRun,\r\n                drawPile: 2\r\n            }\r\n            break;\r\n        default:\r\n            // play first card, pickup from draw stack\r\n            bestPlay = {\r\n                cards: [hand[0]],\r\n                drawPile: 2\r\n            }\r\n            break;\r\n    }\r\n\r\n    // play best run or best set (whichever seems better), pickup from discard pile if lower than 4\r\n    let bestHand;\r\n    let bestSet = getBestSet(hand, matrix);\r\n    let bestRun = getBestRun(hand);\r\n    let bestSetPoints = getPoints(bestSet);\r\n    let bestRunPoints = getPoints(bestRun);\r\n\r\n    if (bestSetPoints >= bestRunPoints) {\r\n        bestHand = bestSet;\r\n    } else {\r\n        bestHand = bestRun;\r\n    }\r\n\r\n    // determine drawPile\r\n    let drawPile = 2;\r\n    if (discardPile.length > 0) {\r\n        let topCard = discardPile[discardPile.length - 1];\r\n        let topCardConverted = getCard(topCard);\r\n        let topCardValue = numberToValueMap[topCardConverted.number];\r\n\r\n        let leftovers = hand.filter((a) => bestHand.indexOf(a) < 0);\r\n        leftovers = leftovers.push(topCard);\r\n        console.log(getCards(leftovers));\r\n\r\n        // take from discard pile if leftovers make up a set or a run, or if top card is less than 4\r\n        let bestLeftoversSet = getBestSet(leftovers, matrix);\r\n        let bestLeftoversRun = getBestRun(leftovers);\r\n        // console.log(getCards(bestLeftoversSet));\r\n        // console.log(getCards(bestLeftoversRun));\r\n        // console.log('bestLeftoversSet: ' + getCards(bestLeftoversSet) + ', bestLeftoversRun: ' + getCards(bestLeftoversRun));\r\n        if (bestLeftoversSet.length >= 2 && bestLeftoversSet.includes(topCard)) {\r\n            console.log('set lengths match: ' + bestLeftoversSet.length);\r\n            drawPile = 1;\r\n        } else if (bestLeftoversRun.length >= 3 && bestLeftoversSet.includes(topCard)) {\r\n            console.log('run lengths match: ' + bestLeftoversRun.length);\r\n            drawPile = 1;\r\n        } else if (topCardValue < 4) {\r\n            console.log('topCardValue match: ' + topCardValue);\r\n            drawPile = 1;\r\n        }\r\n    }\r\n\r\n    // console.log('bestSet: ' + bestSet + ' = ' + bestSetPoints + ' | ' +\r\n    //     'bestRun: ' + bestRun + ' = ' + bestRunPoints + ' | ' +\r\n    //     'bestPlay: '  + bestHand + ' = ' + getPoints(bestHand));\r\n    // console.log('--------------------')\r\n\r\n    bestPlay = {\r\n        cards: bestHand,\r\n        drawPile: drawPile\r\n    }\r\n\r\n    return bestPlay;\r\n}\r\n\r\nfunction getBestRun(hand) {\r\n    let hearts = [];\r\n    let diamonds = [];\r\n    let clubs = [];\r\n    let spades = [];\r\n    let jokers = [];\r\n\r\n    for (let i = 0; i < hand.length; i++) {\r\n        let card = getCard(hand[i]);\r\n        switch (card.suit) {\r\n            case \"H\":\r\n                hearts.push(hand[i]);\r\n                break;\r\n            case \"D\":\r\n                diamonds.push(hand[i]);\r\n                break;\r\n            case \"C\":\r\n                clubs.push(hand[i]);\r\n                break;\r\n            case \"S\":\r\n                spades.push(hand[i]);\r\n                break;\r\n            case \"J\":\r\n                jokers.push(hand[i]);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    let totals = [hearts, diamonds, clubs, spades];\r\n    totals = totals.sort(((a, b) => b.length - a.length));\r\n    // totals = totals.filter(a => a.length === totals[0].length);\r\n\r\n    let bestCards = [];\r\n\r\n    for (let i = 0; i < totals.length; i++) {\r\n        let bestCardsWithJokers = totals[i].concat(jokers);\r\n        if (areCardsPlayable(totals[i])) {\r\n            bestCards = totals[i];\r\n            break;\r\n        } else if (jokers.length === 1 && areCardsPlayable(bestCardsWithJokers)) {\r\n            bestCards = bestCardsWithJokers;\r\n            break;\r\n        } else if (jokers.length === 2 && areCardsPlayable(totals[i].concat(jokers[0]))) {\r\n            bestCards = totals[i].concat(jokers[0]);\r\n            break;\r\n        } else if (jokers.length === 2 && areCardsPlayable(bestCardsWithJokers)) {\r\n            bestCards = bestCardsWithJokers;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (bestCards.length <= 1) {\r\n        let highCard = getCard(hand[0]);\r\n        let value = numberToValueMap[highCard.number];\r\n        bestCards = [hand[0]];\r\n        for (let i = 1; i < hand.length; i++) {\r\n            let card = getCard(hand[i]);\r\n            let v = numberToValueMap[card.number];\r\n            if (v > value) {\r\n                value = v;\r\n                bestCards = [hand[i]];\r\n            }\r\n        }\r\n    }\r\n\r\n    return bestCards;\r\n}\r\n\r\nfunction getBestSet(hand, matrix) {\r\n    let sum = (r, a) => r.map((b, i) => a[i] + b);\r\n    let sets = matrix.reduce(sum);\r\n    let largestCombo = Math.max.apply(Math, sets);\r\n    let highestIndex = 0;\r\n    for (let i = 0; i < sets.length; i++) {\r\n        if (sets[i] === largestCombo) {highestIndex = i}\r\n    }\r\n    let bestSet = []\r\n    let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\r\n    for (let i = 0; i < hand.length; i++) {\r\n        if (numberMap[getCard(hand[i]).number] === highestIndex) {bestSet.push(hand[i])}\r\n    }\r\n    return bestSet;\r\n}\r\n\r\nfunction getMatrix(hand) {\r\n\r\n    // A,2,3,4,5,6,7,8,9,10,J,Q,K,Joker\r\n    let matrix = [\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n    ];\r\n    let suitMap = {J: 0, H: 1, D: 2, C: 3, S: 4}\r\n    let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\r\n\r\n    for (let i = 0; i < hand.length; i++) {\r\n        let card = getCard(hand[i]);\r\n        let suitIndex = suitMap[card.suit];\r\n        let numberIndex = numberMap[card.number];\r\n        matrix[suitIndex][numberIndex]++;\r\n    }\r\n\r\n    return matrix;\r\n}\r\n\r\nexport const areCardsPlayable = (cards) => {\r\n    // requirements: single card || 3+ cards in order with same suit || 2+ cards with same number\r\n    let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\r\n    let mappedCards = [];\r\n    for (let i = 0; i < cards.length; i++) {\r\n        let newCard = getCard(cards[i]);\r\n        newCard.number = numberMap[newCard.number];\r\n        mappedCards.push(newCard);\r\n    }\r\n\r\n    let sameNumbers = false;\r\n    let sameSuitsAndInSequence = false;\r\n\r\n    if (mappedCards.length >= 2) {\r\n        sameNumbers = areCardsSameNumber(mappedCards);\r\n    }\r\n\r\n    if (mappedCards.length >= 3) {\r\n        sameSuitsAndInSequence = areCardsSameSuitAndInSequence(mappedCards);\r\n    }\r\n\r\n    let isValid = false;\r\n    if (cards.length === 1 || sameNumbers || sameSuitsAndInSequence) {isValid = true;}\r\n\r\n    return isValid;\r\n}\r\n\r\nfunction areCardsSameSuitAndInSequence(cards) {\r\n    let isValid = true;\r\n\r\n    // 3+ cards with same suit and in order\r\n    let suit = '';\r\n    for (let i = 0; i < cards.length; i++) {\r\n        if (cards[i].suit !== 'J') {suit = cards[i].suit; break;}\r\n    }\r\n    let numbers = [];\r\n    let numberOfJokers = 0;\r\n    for (let i = 0; i < cards.length; i++) {\r\n        if (cards[i].suit === 'J') {\r\n            numberOfJokers++;\r\n        } else if (cards[i].suit !== suit && cards[i].suit !== 'J') {\r\n            // console.log('suit dont match');\r\n            isValid = false;\r\n            break;\r\n        } else {\r\n            numbers.push(cards[i].number);\r\n        }\r\n    }\r\n\r\n    numbers = numbers.sort((a, b) => a - b);\r\n    for (let i = 1; i < numbers.length; i++) {\r\n        let diff = numbers[i] - numbers[i-1];\r\n        if (\r\n            (diff >= 4) ||\r\n            (diff === 3 && numberOfJokers < 2) ||\r\n            (diff === 2 && numberOfJokers < 1))\r\n        {\r\n            // console.log('not in sequence');\r\n            // console.log('numbers: ' + numbers);\r\n            // console.log(\r\n            //     (numbers[i - 1] !== numbers[i] - 1) + \", \" +\r\n            //     (numbers[i - 1] === numbers[i] - 2 && numberOfJokers < 1) + \", \" +\r\n            //     (numbers[i - 1] === numbers[i] - 3 && numberOfJokers < 2));\r\n            isValid = false;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n}\r\n\r\nfunction areCardsSameNumber(cards) {\r\n    let isValid = true;\r\n\r\n    // 2+ cards of same number\r\n    let number = cards[0].number;\r\n    for (let i = 0; i < cards.length; i++) {\r\n        if (cards[i].number === 0) {continue;}\r\n        if (cards[i].number !== number) {\r\n            isValid = false;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n}","import React from 'react';\r\nimport {getCard} from \"../Utils\";\r\n\r\nclass PlayingCardLabel extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: false\r\n        }\r\n    }\r\n\r\n    handleCardClick(card) {\r\n        if (this.props.paused) {return;}\r\n        let isSelected = !this.state.selected;\r\n        this.setState({selected: isSelected});\r\n        this.props.onCardClick(card);\r\n    }\r\n\r\n    render() {\r\n        const card = getCard(this.props.card);\r\n        const selected = this.state.selected;\r\n\r\n        let suitMap = {H: 'hearts', D: 'diams', C: 'clubs', S: 'spades', J: 'joker'};\r\n        let mappedSuit = suitMap[card.suit];\r\n        let className = \"selectable cursor-pointer card rank-\" + card.number + \" \" + mappedSuit;\r\n        if (this.props.card === 52) {\r\n            className += \" little\";\r\n        } else if (this.props.card === 53) {\r\n            className += \" big\";\r\n        }\r\n        className = className.toLowerCase();\r\n        let suitDiv;\r\n        switch (card.suit) {\r\n            case 'H':\r\n                suitDiv = <div className=\"suit\">&hearts;</div>;\r\n                break;\r\n            case 'D':\r\n                suitDiv = <div className=\"suit\">&diams;</div>;\r\n                break;\r\n            case 'C':\r\n                suitDiv = <div className=\"suit\">&clubs;</div>;\r\n                break;\r\n            case 'S':\r\n                suitDiv = <div className=\"suit\">&spades;</div>;\r\n                break;\r\n            case 'J':\r\n                suitDiv = <div className=\"suit\">Joker</div>;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let render;\r\n        if (selected) {\r\n            // className += \" selected\";\r\n            render =\r\n                <strong>\r\n                    <label onClick={() => this.handleCardClick()} className={className}>\r\n                        <div className=\"rank\">{card.number}</div>\r\n                        {suitDiv}\r\n                    </label>\r\n                </strong>\r\n        } else {\r\n            render =\r\n                <div onClick={() => this.handleCardClick()} className={className}>\r\n                    <div className=\"rank\">{card.number}</div>\r\n                    {suitDiv}\r\n                </div>\r\n        }\r\n\r\n        return (\r\n            <div className=\"playingCards faceImages simpleCards\">\r\n                {render}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayingCardLabel;","import React from 'react'\r\n// import PlayerCardButton from './PlayerCardButton'\r\nimport PlayerCardLabel from './PlayingCardLabel'\r\n\r\nfunction PlayerRow(props) {\r\n    let playerRow = [];\r\n\r\n    function handleCardClick(card) {\r\n        props.onCardClick(card);\r\n    }\r\n\r\n    for(let card of props.player.hand) {\r\n        // playerRow.push(<PlayerCardButton paused={props.paused} key={card} card={card} onCardClick={() => handleCardClick(card)} />);\r\n        playerRow.push(<PlayerCardLabel paused={props.paused} key={card} card={card} onCardClick={() => handleCardClick(card)} />);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"flex flex-wrap items-center justify-center\" >\r\n            {playerRow}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerRow\r\n","import React from 'react'\r\n\r\nfunction YanivButton() {\r\n    return (\r\n        <div>\r\n            <button className=\"px-4 py-1 rounded-md text-white bg-purple-500 hover:bg-purple-600 focus:outline-none\">\r\n                Yaniv\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default YanivButton\r\n","import React from 'react'\r\n\r\nfunction ReadyButton() {\r\n    return (\r\n        <div>\r\n            <button className=\"px-4 py-1 rounded-md text-white bg-blue-500 hover:bg-blue-600 focus:outline-none\">\r\n                Ready\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReadyButton\r\n","import React from 'react'\r\nimport PlayerRow from './PlayerRow'\r\nimport YanivButton from './YanivButton'\r\nimport ScoreDisplay from './ScoreDisplay'\r\nimport IdDisplay from \"./IdDisplay\";\r\nimport {getPoints} from '../Utils.js'\r\nimport ReadyButton from \"./ReadyButton\";\r\n\r\nclass PlayerInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleCardClick = this.handleCardClick.bind(this);\r\n    }\r\n\r\n    handleCardClick(card) {\r\n        let newSelectedCards = this.props.selectedCards;\r\n        if (newSelectedCards.includes(card)) {\r\n            newSelectedCards.splice(newSelectedCards.indexOf(card), 1);\r\n        } else {\r\n            newSelectedCards.push(card);\r\n        }\r\n        this.props.onCardClick(newSelectedCards);\r\n    }\r\n\r\n    handleYanivClick() {\r\n        this.props.onYanivClick();\r\n    }\r\n\r\n    handleReadyClick() {\r\n        this.props.onReadyClick();\r\n    }\r\n\r\n    render() {\r\n        let points = getPoints(this.props.player.hand);\r\n\r\n        return (\r\n            <div className=\"flex flex-col\">\r\n                <div className=\"flex items-center justify-center\">\r\n                    <PlayerRow selectedCards={this.props.selectedCards} paused={this.props.paused} player={this.props.player} onCardClick={this.handleCardClick} />\r\n                </div>\r\n                <div className=\"flex items-center justify-center pt-6\">\r\n                    <span className=\"text-red-500 pr-2 font-bold\">{this.props.player.points}</span>\r\n                    <span className=\"pr-2\"><ScoreDisplay score={this.props.player.score} /></span>\r\n                    {this.props.turn === this.props.player.turn\r\n                        ?\r\n                        <div className=\"bg-yellow-300\"><IdDisplay id={this.props.player.id}/></div>\r\n                        :\r\n                        <div className=\"\"><IdDisplay id={this.props.player.id}/></div>\r\n                    }\r\n                    {points <= 5 && !this.props.paused &&\r\n                        <div onClick={() => this.handleYanivClick()} className=\"pl-4\"><YanivButton /></div>\r\n                    }\r\n                    {this.props.paused &&\r\n                        <div onClick={() => this.handleReadyClick()} className=\"pl-4\"><ReadyButton/></div>\r\n                    }\r\n                </div>\r\n                <div className=\"pt-6 text-red-500\">{this.props.errorMessage}</div>\r\n            </div>\r\n        )\r\n    }    \r\n}\r\n\r\nexport default PlayerInput\r\n","import React from 'react'\r\nimport {getCard} from '../Utils.js'\r\n\r\nfunction DiscardPile (props) {\r\n\r\n    function handleClick() {\r\n        if (props.paused || props.discardPile === undefined || props.discardPile.length === 0) {return;}\r\n        props.onDiscardPileClick();\r\n    }\r\n\r\n    let card;\r\n    let mappedSuit;\r\n    let className;\r\n    let suitDiv;\r\n    let label\r\n    if (props.discardPile.length > 0) {\r\n        card = getCard(props.discardPile[props.discardPile.length - 1]);\r\n\r\n        let suitMap = {H: 'hearts', D: 'diams', C: 'clubs', S: 'spades', J: 'joker'};\r\n        mappedSuit = suitMap[card.suit];\r\n        className = \"selectable cursor-pointer card rank-\" + card.number + \" \" + mappedSuit;\r\n        if (props.discardPile[props.discardPile.length - 1] === 52) {\r\n            className += \" little\";\r\n        } else if (props.discardPile[props.discardPile.length - 1] === 53) {\r\n            className += \" big\";\r\n        }\r\n        className = className.toLowerCase();\r\n        switch (card.suit) {\r\n            case 'H':\r\n                suitDiv = <div className=\"suit\">&hearts;</div>;\r\n                break;\r\n            case 'D':\r\n                suitDiv = <div className=\"suit\">&diams;</div>;\r\n                break;\r\n            case 'C':\r\n                suitDiv = <div className=\"suit\">&clubs;</div>;\r\n                break;\r\n            case 'S':\r\n                suitDiv = <div className=\"suit\">&spades;</div>;\r\n                break;\r\n            case 'J':\r\n                suitDiv = <div className=\"suit\">Joker</div>;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        label = <div onClick={handleClick} className={className}>\r\n                    <div className=\"rank\">{card.number}</div>\r\n                    {suitDiv}\r\n                </div>\r\n    } else {\r\n        label = <div className=\"flex items-center justify-center text-sm w-16 h-20 mx-3 rounded-md bg-white border-4 border-gray-200 focus:outline-none\">\r\n                    discard pile\r\n                </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"playingCards faceImages simpleCards\">\r\n            {label}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DiscardPile\r\n","import React from 'react'\r\n\r\nfunction DrawStack(props) {\r\n\r\n    function handleClick() {\r\n        // if (props.paused || props.drawStack === undefined || props.drawStack.length === 0) {\r\n        //     return;\r\n        // }\r\n        props.onDrawStackClick();\r\n    }\r\n\r\n    let label;\r\n    if (props.drawStack.length > 0) {\r\n        label = <div onClick={handleClick} className=\"selectable cursor-pointer card back\">*</div>;\r\n    } else {\r\n        label = <div onClick={handleClick} className=\"selectable cursor-pointer text-md flex items-center justify-center w-16 h-20 mx-3 rounded-md bg-white border-4 border-gray-200 hover:border-gray-300 focus:outline-none\">\r\n                    shuffle\r\n                </div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"playingCards faceImages simpleCards\">\r\n            {label}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrawStack\r\n","import React from 'react'\r\nimport DiscardPile from './DiscardPile'\r\nimport DrawStack from './DrawStack'\r\n\r\nfunction PlayArea(props) {\r\n\r\n    function handleDiscardPileClick() {\r\n        props.onDiscardPileClick();\r\n    }\r\n\r\n    function handleDrawStackClick() {\r\n        props.onDrawStackClick();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"flex justify-center align-center items-center\">\r\n                {/*<div className=\"pr-3\">Discard Pile ({props.discardPile.length})</div>*/}\r\n                <DiscardPile\r\n                    onDiscardPileClick={handleDiscardPileClick}\r\n                    discardPile={props.discardPile}\r\n                    paused={props.paused}\r\n                />\r\n                <DrawStack\r\n                    onDrawStackClick={handleDrawStackClick}\r\n                    drawStack={props.drawStack}\r\n                    paused={props.paused}\r\n                />\r\n                {/*<div className=\"pl-3\" >Draw Stack ({props.drawStack.length})</div>*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayArea\r\n","import React from 'react'\r\nimport OpponentList from './OpponentList.js'\r\nimport PlayerInput from './PlayerInput.js'\r\nimport PlayArea from './PlayArea.js'\r\nimport {deal, shuffle, getRandomInt, getBestPlay, getPoints, areCardsPlayable} from '../Utils.js'\r\nimport '../css/cards.css';\r\nimport '../cards.css';\r\n\r\nclass GameBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let game = deal(4);\r\n        this.state = {\r\n            players: game.players,\r\n            discardPile: [],\r\n            drawStack: game.deck,\r\n            turn: getRandomInt(0, game.players.length), // represents the deal index of the player whose turn it is\r\n            errorMessage: \"\",\r\n            selectedCards: [],\r\n            paused: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startInterval();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.clearInterval();\r\n    }\r\n\r\n    startInterval() {\r\n        this.clearInterval();\r\n        this.interval = setInterval(() => this.handleTimeout(), 1000);\r\n    }\r\n\r\n    clearInterval() {\r\n        clearInterval(this.interval)\r\n    }\r\n\r\n    handleTimeout() {\r\n        // 1 second = 1000\r\n        if (this.state.turn !== 0) {\r\n            this.handleAutoPlayClick()\r\n        } else {\r\n            this.clearInterval();\r\n        }\r\n    }\r\n\r\n    handleDiscardPileClick() {\r\n        if (this.state.discardPile.length === 0) {\r\n            return;\r\n        }\r\n        this.handlePlayClick(this.state.selectedCards, 0);\r\n    }\r\n\r\n    handleDrawStackClick() {\r\n        if (this.state.drawStack.length === 0) {\r\n            let discardPile = this.state.discardPile;\r\n            let topCard = discardPile.pop();\r\n            discardPile = shuffle(discardPile);\r\n            this.setState({\r\n                drawStack: discardPile,\r\n                discardPile: [topCard]\r\n            })\r\n            return;\r\n        }\r\n        this.handlePlayClick(this.state.selectedCards, 1);\r\n    }\r\n\r\n    handlePlayClick(cards, drawPile) {\r\n        if (this.state.players[0].turn !== this.state.turn) {\r\n            this.setState({errorMessage: \"not your turn\"})\r\n            return;\r\n        } else if (cards.length === 0) {\r\n            this.setState({errorMessage: \"you need to select cards to play\"})\r\n            return;\r\n        }\r\n\r\n        let isPlayable = areCardsPlayable(cards);\r\n        if (!isPlayable) {\r\n            this.setState({errorMessage: \"you can't play those cards\"})\r\n            return;\r\n        }\r\n\r\n        if (drawPile === 0) {\r\n            this.drawFromDiscardPile();\r\n            this.playCards(cards, this.state.players[this.state.turn]);\r\n        } else {\r\n            this.drawFromDrawStack();\r\n            this.playCards(cards, this.state.players[this.state.turn]);\r\n        }\r\n\r\n        this.setState({\r\n            selectedCards: []\r\n        })\r\n\r\n        this.startInterval();\r\n    }\r\n\r\n    handleCardClick(cards) {\r\n        console.log('selectedCards: ' + cards);\r\n        this.setState({selectedCards: cards})\r\n    }\r\n\r\n    playCards(cards, player) {\r\n        // add cards to the discard pile\r\n        let newDiscardPile = this.state.discardPile;\r\n        newDiscardPile = newDiscardPile.concat(cards);\r\n\r\n        // remove cards from the player's hand\r\n        let playerIndex = this.state.players.indexOf(player);\r\n        let newPlayer = this.state.players[playerIndex];\r\n\r\n        for (let i = 0; i < cards.length; i++) {\r\n            if (newPlayer.hand.includes(cards[i])) {\r\n                newPlayer.hand.splice(newPlayer.hand.indexOf(cards[i]), 1);\r\n            }\r\n        }\r\n\r\n        newPlayer.points = getPoints(newPlayer.hand);\r\n\r\n        let newPlayers = this.state.players;\r\n        newPlayers[playerIndex] = newPlayer;\r\n\r\n        this.setState({\r\n            discardPile: newDiscardPile,\r\n            players: newPlayers,\r\n            errorMessage: \"\",\r\n            turn: this.getNextTurn()\r\n        })\r\n    }\r\n\r\n    drawFromDiscardPile() {\r\n        let newDiscardPile = this.state.discardPile;\r\n        const card = newDiscardPile.pop();\r\n        this.addCardToPlayerHand(card, this.state.players[this.state.turn]);\r\n\r\n        this.setState({\r\n            discardPile: newDiscardPile\r\n        })\r\n    }\r\n\r\n    drawFromDrawStack() {\r\n        let newDrawStack = this.state.drawStack;\r\n        const card = newDrawStack.pop();\r\n        this.addCardToPlayerHand(card, this.state.players[this.state.turn]);\r\n\r\n        this.setState({\r\n            drawStack: newDrawStack\r\n        })\r\n    }\r\n\r\n    addCardToPlayerHand(card, player) {\r\n        let playerIndex = this.state.players.indexOf(player);\r\n        let newPlayer = this.state.players[playerIndex];\r\n\r\n        newPlayer.hand.push(card);\r\n\r\n        let newPlayers = this.state.players;\r\n        newPlayers[playerIndex] = newPlayer;\r\n\r\n        this.setState({\r\n            players: newPlayers\r\n        })\r\n    }\r\n\r\n    handleAutoPlayClick() {\r\n        if (this.state.drawStack.length === 0) {\r\n            this.setState({errorMessage: \"draw stack is empty\"});\r\n            return;\r\n        }\r\n\r\n        let player = this.state.players[this.state.turn];\r\n\r\n        // auto call yaniv for the current player\r\n        if (player.points <= 5) {\r\n            this.clearInterval();\r\n            this.callYaniv(player);\r\n            return;\r\n        }\r\n\r\n        // play the current player's \"best\" cards\r\n        let currentPlayerHand = player.hand;\r\n        const bestPlay = getBestPlay(currentPlayerHand, this.state.discardPile, 3);\r\n        bestPlay.drawPile === 1 ? this.drawFromDiscardPile() : this.drawFromDrawStack();\r\n        this.playCards(bestPlay.cards, player);\r\n    }\r\n\r\n    handleYanivClick() {\r\n        // TODO: eventually will need to replace 0 with id of client player\r\n        this.callYaniv(this.state.players[0]);\r\n    }\r\n\r\n    callYaniv(player) {\r\n        let yanivPlayer = player;\r\n\r\n        if (yanivPlayer.turn !== this.state.turn) {\r\n            this.setState({errorMessage: \"not your turn\"})\r\n            return;\r\n        }\r\n\r\n        let newPlayers = this.state.players;\r\n        let asafCalled = false;\r\n        for (let i = 0; i < newPlayers.length; i++) {\r\n            if (newPlayers[i] === yanivPlayer) {continue;}\r\n\r\n            let opponent = newPlayers[i];\r\n            if (opponent.points > yanivPlayer.points) {\r\n                opponent.score += opponent.points;\r\n            } else if (opponent.points <= yanivPlayer.points && !asafCalled) {\r\n                yanivPlayer.score += 35;\r\n                asafCalled = true;\r\n            }\r\n            newPlayers[i] = opponent;\r\n        }\r\n\r\n        this.setState({\r\n            players: newPlayers,\r\n            paused: true\r\n        })\r\n    }\r\n\r\n    handleReadyClick() {\r\n\r\n        // deal cards\r\n        let newPlayers = this.state.players;\r\n        let newDeal = deal(4);\r\n        for (let i = 0; i < newDeal.players.length; i++) {\r\n            newPlayers[i].hand = newDeal.players[i].hand;\r\n            newPlayers[i].points = newDeal.players[i].points;\r\n        }\r\n\r\n        this.setState({\r\n            players: newPlayers,\r\n            discardPile: [],\r\n            drawStack: newDeal.deck,\r\n            turn: this.getNextTurn(),\r\n            paused: false,\r\n            selectedCards: []\r\n        })\r\n\r\n        // start interval\r\n        this.startInterval();\r\n    }\r\n\r\n    getNextTurn() {\r\n        let turn = this.state.turn;\r\n        turn + 1 >= this.state.players.length ? turn = 0 : turn = turn + 1;\r\n        return turn;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"flex items-center justify-center flex-col bg-white\">\r\n                <div className=\"border-b-2 p-8\">\r\n                    <OpponentList paused={this.state.paused} turn={this.state.turn} players={this.state.players} />\r\n                </div>\r\n                <div className=\"border-b-2 p-8\">\r\n                    <PlayArea\r\n                        discardPile={this.state.discardPile}\r\n                        drawStack={this.state.drawStack}\r\n                        onDiscardPileClick={() => this.handleDiscardPileClick()}\r\n                        onDrawStackClick={() => this.handleDrawStackClick()}\r\n                        paused={this.state.paused}\r\n                    />\r\n                </div>\r\n                <div className=\"p-8\">\r\n                    <PlayerInput\r\n                        onAutoPlayClick={() => this.handleAutoPlayClick()}\r\n                        player={this.state.players[0]}\r\n                        errorMessage={this.state.errorMessage}\r\n                        turn={this.state.turn}\r\n                        onCardClick={(cards) => this.handleCardClick(cards)}\r\n                        onYanivClick={() => this.handleYanivClick()}\r\n                        onReadyClick={() => this.handleReadyClick()}\r\n                        selectedCards={this.state.selectedCards}\r\n                        paused={this.state.paused}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameBoard\r\n","import '../css/App.css';\nimport GameBoard from './GameBoard.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">      \n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}