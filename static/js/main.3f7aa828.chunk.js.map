{"version":3,"sources":["components/OpponentCard.js","components/ScoreDisplay.js","components/IdDisplay.js","components/OpponentRow.js","components/OpponentList.js","Utils.js","components/PlayingCardLabel.js","components/PlayerRow.js","components/YanivButton.js","components/ReadyButton.js","components/PlayerInput.js","components/DiscardPile.js","components/DrawStack.js","components/PlayArea.js","components/GameBoard.js","components/ChatSignIn.js","components/ChatMessage.js","components/ChatRoom.js","components/Chat.js","components/App.js","index.js"],"names":["OpponentCard","props","className","ScoreDisplay","score","IdDisplay","id","OpponentRow","opponentRow","player","hand","card","push","turn","paused","points","OpponentList","opponents","i","players","length","getNextTurn","currentTurn","numberOfPlayers","newTurn","getCard","cardNumber","hearts","Array","from","keys","diamonds","_","clubs","spades","suit","number","includes","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","deal","deck","buildHand","lastDrawPile","getPoints","numberOfCards","index","pop","getRandomInt","start","count","numberToValueMap","0","A","2","3","4","5","6","7","8","9","10","J","Q","K","getBestPlay","discardPile","playStyle","bestHand","matrix","suitMap","H","D","C","S","numberMap","suitIndex","numberIndex","getMatrix","cards","drawPile","getBestSet","bestRun","getBestRun","bestSet","bestSetPoints","bestRunPoints","topCard","topCardConverted","topCardValue","leftovers","filter","a","indexOf","bestLeftoversSet","bestLeftoversRun","console","log","jokers","totals","sort","b","bestCards","bestCardsWithJokers","concat","areCardsPlayable","highCard","value","v","sets","reduce","r","map","largestCombo","max","apply","highestIndex","mappedCards","newCard","sameNumbers","sameSuitsAndInSequence","isValid","areCardsSameNumber","numbers","numberOfJokers","diff","areCardsSameSuitAndInSequence","PlayingCardLabel","useState","selected","setSelected","handleCardClick","onCardClick","suitDiv","render","mappedSuit","toLowerCase","onClick","PlayerRow","playerRow","YanivButton","ReadyButton","PlayerInput","selectedCards","newSelectedCards","splice","onYanivClick","onReadyClick","errorMessage","DiscardPile","handleClick","undefined","onDiscardPileClick","label","discards","lastPlayedCards","DrawStack","onDrawStackClick","drawStack","PlayArea","GameBoard","game","setPlayers","setDiscardPile","setDrawStack","setTurn","setErrorMessage","setSelectedCards","setPaused","useReducer","x","forceUpdate","setLastPlayedCards","handlePlayClick","drawFromDiscardPile","playCards","drawFromDrawStack","slapDownCard","newDiscardPile","newPlayers","newLastPlayedCards","playerIndex","newPlayer","newCards","addCardToPlayerHand","newDrawStack","callYaniv","yanivPlayer","asafCalled","opponent","useEffect","interval","clearInterval","setInterval","currentPlayerHand","bestPlay","handleAutoPlayClick","handleDrawStackClick","combined","allSame","firstNumber","gameOver","newDeal","handleReadyClick","ChatSignIn","auth","firebase","provider","GoogleAuthProvider","signInWithPopup","ChatMessage","message","text","uid","ChatRoom","messagesRef","firestore","collection","query","orderBy","limit","useCollectionData","idField","messages","formValue","setFormValue","sendMessage","e","preventDefault","currentUser","add","createdAt","FieldValue","serverTimestamp","signOut","msg","onSubmit","onChange","target","type","placeholder","maxLength","apps","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Chat","useAuthState","user","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f7aa828.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction OpponentCard(props) {\r\n    // let card = getCard(props.card);\r\n\r\n    return (\r\n        <div className=\"card back\">*</div>\r\n    )\r\n}\r\n\r\nexport default OpponentCard\r\n","import React from 'react'\r\n\r\nfunction ScoreDisplay(props) {\r\n    return (\r\n        <div className=\"text-green-600 font-bold\">\r\n            {props.score}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreDisplay\r\n","import React from 'react'\r\n\r\nfunction IdDisplay(props) {\r\n    return (\r\n        <div>\r\n            {props.id}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IdDisplay\r\n","import React from 'react'\r\nimport OpponentCard from './OpponentCard'\r\nimport ScoreDisplay from './ScoreDisplay'\r\nimport IdDisplay from './IdDisplay'\r\n// import {getCard} from \"../Utils\";\r\n\r\nfunction OpponentRow(props) {\r\n    let opponentRow = [];\r\n    for(let card of props.player.hand) {\r\n        opponentRow.push(<OpponentCard key={card} card={card}/>);\r\n    }\r\n\r\n    // let handDisplay = '';\r\n    // let card;\r\n    // for (let i = 0; i < props.player.hand.length; i++) {\r\n    //     card = getCard(props.player.hand[i]);\r\n    //     handDisplay += card.number + card.suit + ', ';\r\n    // }\r\n\r\n    return (\r\n        <div className=\"px-8\">\r\n            <div className=\"flex items-center justify-center py-3\">\r\n                {props.turn === props.player.turn\r\n                    ?\r\n                    <div className=\"bg-yellow-300\"><IdDisplay id={props.player.id}/></div>\r\n                    :\r\n                    <div className=\"\"><IdDisplay id={props.player.id}/></div>\r\n                }\r\n                <div className=\"pl-2\"><ScoreDisplay score={props.player.score} /></div>\r\n                {props.paused &&\r\n                    <span className=\"text-red-500 pl-2 font-bold\">{props.player.points}</span>\r\n                }\r\n            </div>\r\n            <div className=\"-space-x-12 flex flex-wrap items-center playingCards faceImages simpleCards\">\r\n                {opponentRow}\r\n            </div>            \r\n            {/*<div>{handDisplay}</div>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpponentRow","import React from 'react'\r\nimport OpponentRow from './OpponentRow'\r\n\r\nfunction OpponentList(props) {\r\n\r\n    let opponents = [];\r\n    for (let i = 0; i < props.players.length; i++) {\r\n        if (i === 0) {continue}\r\n        opponents.push(<OpponentRow paused={props.paused} key={i} player={props.players[i]} turn={props.turn} />)\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-wrap content-center\">\r\n            {opponents}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpponentList\r\n","export const getNextTurn = (currentTurn, numberOfPlayers) => {\r\n    let newTurn = currentTurn;\r\n    newTurn + 1 >= numberOfPlayers ? newTurn = 0 : newTurn = newTurn + 1;\r\n    return newTurn;\r\n}\r\n\r\nexport const getCard = (cardNumber) => {\r\n    const hearts = Array.from(Array(13).keys());\r\n    const diamonds = Array.from({length: 13}, (_, i) => i + 13);\r\n    const clubs = Array.from({length: 13}, (_, i) => i + 26);\r\n    const spades = Array.from({length: 13}, (_, i) => i + 39);\r\n    const jokers = [52, 53];\r\n\r\n    let suit = '';\r\n    let number = cardNumber;\r\n    if (hearts.includes(cardNumber)) {\r\n        suit = 'H';\r\n    } else if (diamonds.includes(cardNumber)) {\r\n        suit = 'D';\r\n        number = number - 13;\r\n    } else if (clubs.includes(cardNumber)) {\r\n        suit = 'C';\r\n        number = number - 26;\r\n    } else if (spades.includes(cardNumber)) {\r\n        suit = 'S';\r\n        number = number - 39;\r\n    } else if (jokers.includes(cardNumber)) {\r\n        suit = 'J';\r\n        number = '-1';\r\n    }\r\n\r\n    if (number === 0 ) {\r\n        number = 'A';\r\n    } else if (number === 10) {\r\n        number = 'J';\r\n    } else if (number === 11) {\r\n        number = 'Q';\r\n    } else if (number === 12) {\r\n        number = 'K';\r\n    } else if (number === -1) {\r\n        number = 0;\r\n    } else {\r\n        number++;\r\n    }\r\n\r\n    return {number: number, suit: suit}\r\n}\r\n\r\nexport const getCards = (cards) => {\r\n    let newCards = [];\r\n    for (let i = 0; i < cards.length; i++) {\r\n        newCards.push(getCard(cards[i]));\r\n    }\r\n    return newCards;\r\n}\r\n\r\nexport const shuffle = (array) => {\r\n    let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nexport const deal = (numberOfPlayers) => {\r\n    // cars 52 and 53 are jokers\r\n    let deck = Array.from(Array(54).keys());\r\n    deck = shuffle(deck);\r\n\r\n    let players = [];\r\n    for (let i = 0; i < numberOfPlayers; i++) {\r\n        players.push({\r\n            id: 'Player ' + i,\r\n            score: 0,\r\n            hand: buildHand(5),\r\n            turn: i,\r\n            points: 0,\r\n            lastDrawPile: 0\r\n        })\r\n    }\r\n    for (let i = 0; i < players.length; i++) {\r\n        players[i].points = getPoints(players[i].hand);\r\n    }\r\n\r\n    function buildHand(numberOfCards) {\r\n        let hand = [];\r\n        for (let index = 0; index < numberOfCards; index++) {\r\n            hand.push(deck.pop());\r\n        }\r\n        return hand;\r\n    }\r\n\r\n    return {players: players, deck: deck};\r\n}\r\n\r\nexport const getRandomInt = (start, count) => {\r\n    // start = inclusive, end = exclusive\r\n    return Math.floor(Math.random() * count) + start;\r\n}\r\n\r\nconst numberToValueMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 10, Q: 10, K: 10};\r\n\r\nexport const getPoints = (hand) => {\r\n    let points = 0;\r\n    for (let i = 0; i < hand.length; i++) {\r\n        let card = getCard(hand[i]);\r\n        let amount = numberToValueMap[card.number];\r\n        points += amount;\r\n    }\r\n    return points;\r\n}\r\n\r\nexport const getBestPlay = (hand, discardPile, playStyle) => {\r\n    let bestPlay;\r\n    let matrix = getMatrix(hand);\r\n\r\n    switch (playStyle) {\r\n        case 0:\r\n            // play single random card, pickup from draw stack\r\n            bestPlay = {\r\n                cards: [hand[getRandomInt(0, hand.length)]],\r\n                drawPile: 2\r\n            }\r\n            break;\r\n        case 1:\r\n            // play the best set (matching numbers) or highest card, pickup from draw stack\r\n            let bestSet = getBestSet(hand, matrix);\r\n            bestPlay = {\r\n                cards: bestSet,\r\n                drawPile: 2\r\n            }\r\n            break;\r\n        case 2:\r\n            // play the best run (3+ same suit and in order) or highest card, pickup from draw stack\r\n            let bestRun = getBestRun(hand, matrix);\r\n            if (bestRun.length === 0) {\r\n                bestRun = [hand[getRandomInt(0, hand.length)]];\r\n            }\r\n            bestPlay = {\r\n                cards: bestRun,\r\n                drawPile: 2\r\n            }\r\n            break;\r\n        default:\r\n            // play first card, pickup from draw stack\r\n            bestPlay = {\r\n                cards: [hand[0]],\r\n                drawPile: 2\r\n            }\r\n            break;\r\n    }\r\n\r\n    // play best run or best set (whichever seems better), pickup from discard pile if lower than 4\r\n    let bestHand;\r\n    let bestSet = getBestSet(hand, matrix);\r\n    let bestRun = getBestRun(hand);\r\n    let bestSetPoints = getPoints(bestSet);\r\n    let bestRunPoints = getPoints(bestRun);\r\n\r\n    if (bestSetPoints >= bestRunPoints) {\r\n        bestHand = bestSet;\r\n    } else {\r\n        bestHand = bestRun;\r\n    }\r\n\r\n    // determine drawPile\r\n    let drawPile = 2;\r\n    if (discardPile.length > 0) {\r\n        let topCard = discardPile[discardPile.length - 1];\r\n        let topCardConverted = getCard(topCard);\r\n        let topCardValue = numberToValueMap[topCardConverted.number];\r\n\r\n        let leftovers = hand.filter((a) => bestHand.indexOf(a) < 0);\r\n        leftovers = leftovers.push(topCard);\r\n\r\n        // take from discard pile if leftovers make up a set or a run, or if top card is less than 4\r\n        let bestLeftoversSet = getBestSet(leftovers, matrix);\r\n        let bestLeftoversRun = getBestRun(leftovers);\r\n        // console.log(getCards(bestLeftoversSet));\r\n        // console.log(getCards(bestLeftoversRun));\r\n        // console.log('bestLeftoversSet: ' + getCards(bestLeftoversSet) + ', bestLeftoversRun: ' + getCards(bestLeftoversRun));\r\n        if (bestLeftoversSet.length >= 2 && bestLeftoversSet.includes(topCard)) {\r\n            console.log('set lengths match: ' + bestLeftoversSet.length);\r\n            drawPile = 1;\r\n        } else if (bestLeftoversRun.length >= 3 && bestLeftoversSet.includes(topCard)) {\r\n            console.log('run lengths match: ' + bestLeftoversRun.length);\r\n            drawPile = 1;\r\n        } else if (topCardValue < 4) {\r\n            console.log('topCardValue match: ' + topCardValue);\r\n            drawPile = 1;\r\n        }\r\n    }\r\n\r\n    // console.log('bestSet: ' + bestSet + ' = ' + bestSetPoints + ' | ' +\r\n    //     'bestRun: ' + bestRun + ' = ' + bestRunPoints + ' | ' +\r\n    //     'bestPlay: '  + bestHand + ' = ' + getPoints(bestHand));\r\n    // console.log('--------------------')\r\n\r\n    bestPlay = {\r\n        cards: bestHand,\r\n        drawPile: drawPile\r\n    }\r\n\r\n    return bestPlay;\r\n}\r\n\r\nfunction getBestRun(hand) {\r\n    let hearts = [];\r\n    let diamonds = [];\r\n    let clubs = [];\r\n    let spades = [];\r\n    let jokers = [];\r\n\r\n    for (let i = 0; i < hand.length; i++) {\r\n        let card = getCard(hand[i]);\r\n        switch (card.suit) {\r\n            case \"H\":\r\n                hearts.push(hand[i]);\r\n                break;\r\n            case \"D\":\r\n                diamonds.push(hand[i]);\r\n                break;\r\n            case \"C\":\r\n                clubs.push(hand[i]);\r\n                break;\r\n            case \"S\":\r\n                spades.push(hand[i]);\r\n                break;\r\n            case \"J\":\r\n                jokers.push(hand[i]);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    let totals = [hearts, diamonds, clubs, spades];\r\n    totals = totals.sort(((a, b) => b.length - a.length));\r\n    // totals = totals.filter(a => a.length === totals[0].length);\r\n\r\n    let bestCards = [];\r\n\r\n    for (let i = 0; i < totals.length; i++) {\r\n        let bestCardsWithJokers = totals[i].concat(jokers);\r\n        if (areCardsPlayable(totals[i])) {\r\n            bestCards = totals[i];\r\n            break;\r\n        } else if (jokers.length === 1 && areCardsPlayable(bestCardsWithJokers)) {\r\n            bestCards = bestCardsWithJokers;\r\n            break;\r\n        } else if (jokers.length === 2 && areCardsPlayable(totals[i].concat(jokers[0]))) {\r\n            bestCards = totals[i].concat(jokers[0]);\r\n            break;\r\n        } else if (jokers.length === 2 && areCardsPlayable(bestCardsWithJokers)) {\r\n            bestCards = bestCardsWithJokers;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (bestCards.length <= 1) {\r\n        let highCard = getCard(hand[0]);\r\n        let value = numberToValueMap[highCard.number];\r\n        bestCards = [hand[0]];\r\n        for (let i = 1; i < hand.length; i++) {\r\n            let card = getCard(hand[i]);\r\n            let v = numberToValueMap[card.number];\r\n            if (v > value) {\r\n                value = v;\r\n                bestCards = [hand[i]];\r\n            }\r\n        }\r\n    }\r\n\r\n    return bestCards;\r\n}\r\n\r\nfunction getBestSet(hand, matrix) {\r\n    let sum = (r, a) => r.map((b, i) => a[i] + b);\r\n    let sets = matrix.reduce(sum);\r\n    let largestCombo = Math.max.apply(Math, sets);\r\n    let highestIndex = 0;\r\n    for (let i = 0; i < sets.length; i++) {\r\n        if (sets[i] === largestCombo) {highestIndex = i}\r\n    }\r\n    let bestSet = []\r\n    let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\r\n    for (let i = 0; i < hand.length; i++) {\r\n        if (numberMap[getCard(hand[i]).number] === highestIndex) {bestSet.push(hand[i])}\r\n    }\r\n    return bestSet;\r\n}\r\n\r\nfunction getMatrix(hand) {\r\n\r\n    // A,2,3,4,5,6,7,8,9,10,J,Q,K,Joker\r\n    let matrix = [\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n    ];\r\n    let suitMap = {J: 0, H: 1, D: 2, C: 3, S: 4}\r\n    let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\r\n\r\n    for (let i = 0; i < hand.length; i++) {\r\n        let card = getCard(hand[i]);\r\n        let suitIndex = suitMap[card.suit];\r\n        let numberIndex = numberMap[card.number];\r\n        matrix[suitIndex][numberIndex]++;\r\n    }\r\n\r\n    return matrix;\r\n}\r\n\r\nexport const areCardsPlayable = (cards) => {\r\n    // requirements: single card || 3+ cards in order with same suit || 2+ cards with same number\r\n    let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\r\n    let mappedCards = [];\r\n    for (let i = 0; i < cards.length; i++) {\r\n        let newCard = getCard(cards[i]);\r\n        newCard.number = numberMap[newCard.number];\r\n        mappedCards.push(newCard);\r\n    }\r\n\r\n    let sameNumbers = false;\r\n    let sameSuitsAndInSequence = false;\r\n\r\n    if (mappedCards.length >= 2) {\r\n        sameNumbers = areCardsSameNumber(mappedCards);\r\n    }\r\n\r\n    if (mappedCards.length >= 3) {\r\n        sameSuitsAndInSequence = areCardsSameSuitAndInSequence(mappedCards);\r\n    }\r\n\r\n    let isValid = false;\r\n    if (cards.length === 1 || sameNumbers || sameSuitsAndInSequence) {isValid = true;}\r\n\r\n    return isValid;\r\n}\r\n\r\nfunction areCardsSameSuitAndInSequence(cards) {\r\n    let isValid = true;\r\n\r\n    // 3+ cards with same suit and in order\r\n    let suit = '';\r\n    for (let i = 0; i < cards.length; i++) {\r\n        if (cards[i].suit !== 'J') {suit = cards[i].suit; break;}\r\n    }\r\n    let numbers = [];\r\n    let numberOfJokers = 0;\r\n    for (let i = 0; i < cards.length; i++) {\r\n        if (cards[i].suit === 'J') {\r\n            numberOfJokers++;\r\n        } else if (cards[i].suit !== suit && cards[i].suit !== 'J') {\r\n            // console.log('suit dont match');\r\n            isValid = false;\r\n            break;\r\n        } else {\r\n            numbers.push(cards[i].number);\r\n        }\r\n    }\r\n\r\n    numbers = numbers.sort((a, b) => a - b);\r\n    for (let i = 1; i < numbers.length; i++) {\r\n        let diff = numbers[i] - numbers[i-1];\r\n        if (\r\n            (diff >= 4) ||\r\n            (diff === 3 && numberOfJokers < 2) ||\r\n            (diff === 2 && numberOfJokers < 1))\r\n        {\r\n            // console.log('not in sequence');\r\n            // console.log('numbers: ' + numbers);\r\n            // console.log(\r\n            //     (numbers[i - 1] !== numbers[i] - 1) + \", \" +\r\n            //     (numbers[i - 1] === numbers[i] - 2 && numberOfJokers < 1) + \", \" +\r\n            //     (numbers[i - 1] === numbers[i] - 3 && numberOfJokers < 2));\r\n            isValid = false;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n}\r\n\r\nfunction areCardsSameNumber(cards) {\r\n    let isValid = true;\r\n\r\n    // 2+ cards of same number\r\n    let number = cards[0].number;\r\n    for (let i = 0; i < cards.length; i++) {\r\n        if (cards[i].number === 0) {continue;}\r\n        if (cards[i].number !== number) {\r\n            isValid = false;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n}","import React, {useState} from 'react';\r\nimport {getCard} from \"../Utils\";\r\n\r\nfunction PlayingCardLabel(props) {\r\n    const [selected, setSelected] = useState(false);\r\n\r\n    function handleCardClick() {\r\n        if (props.paused) {return;}\r\n        let isSelected = !selected;\r\n        setSelected(isSelected);\r\n        props.onCardClick(props.card);\r\n    }\r\n\r\n    const card = getCard(props.card);\r\n\r\n    let suitMap = {H: 'hearts', D: 'diams', C: 'clubs', S: 'spades', J: 'joker'};\r\n    let mappedSuit = suitMap[card.suit];\r\n    let className = \"selectable cursor-pointer card rank-\" + card.number + \" \" + mappedSuit;\r\n    if (props.card === 52) {\r\n        className += \" little\";\r\n    } else if (props.card === 53) {\r\n        className += \" big\";\r\n    }\r\n    className = className.toLowerCase();\r\n    let suitDiv;\r\n    switch (card.suit) {\r\n        case 'H':\r\n            suitDiv = <div className=\"suit\">&hearts;</div>;\r\n            break;\r\n        case 'D':\r\n            suitDiv = <div className=\"suit\">&diams;</div>;\r\n            break;\r\n        case 'C':\r\n            suitDiv = <div className=\"suit\">&clubs;</div>;\r\n            break;\r\n        case 'S':\r\n            suitDiv = <div className=\"suit\">&spades;</div>;\r\n            break;\r\n        case 'J':\r\n            suitDiv = <div className=\"suit\">Joker</div>;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    let render;\r\n    if (selected) {\r\n        // className += \" selected\";\r\n        render =\r\n            <strong>\r\n                <label onClick={() => handleCardClick()} className={className}>\r\n                    <div className=\"rank\">{card.number}</div>\r\n                    {suitDiv}\r\n                </label>\r\n            </strong>\r\n    } else {\r\n        render =\r\n            <div onClick={() => handleCardClick()} className={className}>\r\n                <div className=\"rank\">{card.number}</div>\r\n                {suitDiv}\r\n            </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"playingCards faceImages simpleCards\">\r\n            {render}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayingCardLabel;","import React from 'react'\r\n// import PlayerCardButton from './PlayerCardButton'\r\nimport PlayerCardLabel from './PlayingCardLabel'\r\n\r\nfunction PlayerRow(props) {\r\n    let playerRow = [];\r\n\r\n    function handleCardClick(card) {\r\n        props.onCardClick(card);\r\n    }\r\n\r\n    for(let card of props.player.hand) {\r\n        // playerRow.push(<PlayerCardButton paused={props.paused} key={card} card={card} onCardClick={() => handleCardClick(card)} />);\r\n        playerRow.push(<PlayerCardLabel paused={props.paused} key={card} card={card} onCardClick={(card) => handleCardClick(card)} />);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"space-x-3 flex items-center justify-center flex-wrap\" >\r\n            {playerRow}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerRow\r\n","import React from 'react'\r\n\r\nfunction YanivButton() {\r\n    return (\r\n        <div>\r\n            <button className=\"px-4 py-1 rounded-md text-white bg-purple-500 hover:bg-purple-600 focus:outline-none\">\r\n                Yaniv\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default YanivButton\r\n","import React from 'react'\r\n\r\nfunction ReadyButton() {\r\n    return (\r\n        <div>\r\n            <button className=\"px-4 py-1 rounded-md text-white bg-blue-500 hover:bg-blue-600 focus:outline-none\">\r\n                Ready\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReadyButton\r\n","import React from 'react'\r\nimport PlayerRow from './PlayerRow'\r\nimport YanivButton from './YanivButton'\r\nimport ScoreDisplay from './ScoreDisplay'\r\nimport IdDisplay from \"./IdDisplay\";\r\nimport {getPoints} from '../Utils.js'\r\nimport ReadyButton from \"./ReadyButton\";\r\n\r\nfunction PlayerInput(props) {\r\n\r\n    function handleCardClick(card) {\r\n        let newSelectedCards = props.selectedCards;\r\n        if (newSelectedCards.includes(card)) {\r\n            newSelectedCards.splice(newSelectedCards.indexOf(card), 1);\r\n        } else {\r\n            newSelectedCards.push(card);\r\n        }\r\n        props.onCardClick(newSelectedCards, card);\r\n    }\r\n\r\n    function handleYanivClick() {\r\n        props.onYanivClick();\r\n    }\r\n\r\n    function handleReadyClick() {\r\n        props.onReadyClick();\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col\">\r\n            <div className=\"\">\r\n                <PlayerRow selectedCards={props.selectedCards} paused={props.paused} player={props.player} onCardClick={(card) => handleCardClick(card)} />\r\n            </div>\r\n            <div className=\"flex items-center justify-center pt-6\">\r\n                {props.turn === props.player.turn\r\n                    ?\r\n                    <div className=\"bg-yellow-300\"><IdDisplay id={props.player.id}/></div>\r\n                    :\r\n                    <div className=\"\"><IdDisplay id={props.player.id}/></div>\r\n                }\r\n                <span className=\"pl-2\"><ScoreDisplay score={props.player.score} /></span>\r\n                {props.paused &&\r\n                <span className=\"text-red-500 font-bold pl-2\">{props.player.points}</span>\r\n                }\r\n                {getPoints(props.player.hand) <= 5 && !props.paused &&\r\n                    <div onClick={() => handleYanivClick()} className=\"pl-4\"><YanivButton /></div>\r\n                }\r\n                {props.paused &&\r\n                    <div onClick={() => handleReadyClick()} className=\"pl-4\"><ReadyButton/></div>\r\n                }\r\n            </div>\r\n            <div className=\"pt-6 text-red-500\">{props.errorMessage}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerInput\r\n","import React from 'react'\r\nimport {getCard} from '../Utils.js'\r\n\r\nfunction DiscardPile (props) {\r\n\r\n    function handleClick() {\r\n        if (props.paused || props.discardPile === undefined || props.discardPile.length === 0) {return;}\r\n        props.onDiscardPileClick();\r\n    }\r\n\r\n    let mappedSuit;\r\n    let className;\r\n    let suitDiv;\r\n    let label;\r\n    let discards;\r\n\r\n    if (props.discardPile.length > 0) {\r\n\r\n        let cards = props.lastPlayedCards;\r\n\r\n        let suitMap = {H: 'hearts', D: 'diams', C: 'clubs', S: 'spades', J: 'joker'};\r\n        discards = [];\r\n\r\n        for (let i = 0; i < cards.length; i++) {\r\n            let card = getCard(cards[i]);\r\n            mappedSuit = suitMap[card.suit];\r\n            className = \"discard card rank-\" + card.number + \" \" + mappedSuit;\r\n            if (cards[i] === 52) {\r\n                className += \" little\";\r\n            } else if (cards[i] === 53) {\r\n                className += \" big\";\r\n            }\r\n            className = className.toLowerCase();\r\n            switch (card.suit) {\r\n                case 'H':\r\n                    suitDiv = <div className=\"suit\">&hearts;</div>;\r\n                    break;\r\n                case 'D':\r\n                    suitDiv = <div className=\"suit\">&diams;</div>;\r\n                    break;\r\n                case 'C':\r\n                    suitDiv = <div className=\"suit\">&clubs;</div>;\r\n                    break;\r\n                case 'S':\r\n                    suitDiv = <div className=\"suit\">&spades;</div>;\r\n                    break;\r\n                case 'J':\r\n                    suitDiv = <div className=\"suit\">Joker</div>;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            if (i === (cards.length - 1)) {\r\n                className += \" selectable cursor-pointer\";\r\n                label =\r\n                    <div key={cards[i]} onClick={handleClick} className={className}>\r\n                        <div className=\"rank\">{card.number}</div>\r\n                        {suitDiv}\r\n                    </div>\r\n            } else {\r\n                label =\r\n                    <div key={cards[i]} className={className}>\r\n                        <div className=\"rank\">{card.number}</div>\r\n                        {suitDiv}\r\n                    </div>\r\n            }\r\n            discards.push(label);\r\n        }\r\n    } else {\r\n        discards = <div className=\"flex items-center justify-center text-sm w-16 h-20 mx-3 rounded-md bg-white border-4 border-gray-200 focus:outline-none\">\r\n                    discard pile\r\n                </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"-space-x-12\">\r\n            {discards}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DiscardPile\r\n","import React from 'react'\r\n\r\nfunction DrawStack(props) {\r\n\r\n    function handleClick() {\r\n        // if (props.paused || props.drawStack === undefined || props.drawStack.length === 0) {\r\n        //     return;\r\n        // }\r\n        props.onDrawStackClick();\r\n    }\r\n\r\n    let label;\r\n    if (props.drawStack.length > 0) {\r\n        label = <div onClick={handleClick} className=\"selectable cursor-pointer card back\">*</div>;\r\n    } else {\r\n        label = <div onClick={handleClick} className=\"selectable cursor-pointer text-md flex items-center justify-center w-16 h-20 mx-3 rounded-md bg-white border-4 border-gray-200 hover:border-gray-300 focus:outline-none\">\r\n                    shuffle\r\n                </div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {label}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrawStack\r\n","import React from 'react'\r\nimport DiscardPile from './DiscardPile'\r\nimport DrawStack from './DrawStack'\r\n\r\nfunction PlayArea(props) {\r\n\r\n    function handleDiscardPileClick() {\r\n        props.onDiscardPileClick();\r\n    }\r\n\r\n    function handleDrawStackClick() {\r\n        props.onDrawStackClick();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"space-x-3 flex justify-center align-center items-center playingCards faceImages simpleCards\">\r\n                {/*<div className=\"pr-3\">Discard Pile ({props.discardPile.length})</div>*/}\r\n                <DrawStack\r\n                    onDrawStackClick={handleDrawStackClick}\r\n                    drawStack={props.drawStack}\r\n                    paused={props.paused}\r\n                />\r\n                <DiscardPile\r\n                    onDiscardPileClick={handleDiscardPileClick}\r\n                    discardPile={props.discardPile}\r\n                    paused={props.paused}\r\n                    lastPlayedCards={props.lastPlayedCards}\r\n                />\r\n                {/*<div className=\"pl-3\" >Draw Stack ({props.drawStack.length})</div>*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayArea\r\n","import React, {useEffect, useReducer, useState} from 'react'\r\nimport OpponentList from './OpponentList.js'\r\nimport PlayerInput from './PlayerInput.js'\r\nimport PlayArea from './PlayArea.js'\r\nimport {\r\n    deal,\r\n    shuffle,\r\n    getRandomInt,\r\n    getBestPlay,\r\n    getPoints,\r\n    areCardsPlayable,\r\n    getCard,\r\n    getNextTurn\r\n} from '../Utils.js'\r\nimport '../css/cards.css';\r\nimport '../cards.css';\r\n\r\nfunction GameBoard() {\r\n\r\n    let game = deal(4);\r\n    const [players, setPlayers] = useState(game.players);\r\n    const [discardPile, setDiscardPile] = useState([]);\r\n    const [drawStack, setDrawStack] = useState(game.deck);\r\n    const [turn, setTurn] = useState(getRandomInt(0, game.players.length));\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [selectedCards, setSelectedCards] = useState([]);\r\n    const [paused, setPaused] = useState(false);\r\n    const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n    const [lastPlayedCards, setLastPlayedCards] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (!paused && turn !== 0) {\r\n            interval = setInterval(() => handleTimeout(), 1500);\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    });\r\n\r\n    function handleTimeout() {\r\n        // 1 second = 1000\r\n        handleAutoPlayClick()\r\n    }\r\n\r\n    function handleDiscardPileClick() {\r\n        if (discardPile.length === 0) {\r\n            return;\r\n        }\r\n\r\n        handlePlayClick(selectedCards, 0);\r\n    }\r\n\r\n    function handleDrawStackClick() {\r\n        if (drawStack.length === 0) {\r\n            let newDiscardPile = discardPile;\r\n            let topCard = newDiscardPile.pop();\r\n            newDiscardPile = shuffle(newDiscardPile);\r\n\r\n            setDrawStack(newDiscardPile);\r\n            setDiscardPile([topCard]);\r\n            return;\r\n        }\r\n        handlePlayClick(selectedCards, 1);\r\n    }\r\n\r\n    function handlePlayClick(cards, drawPile) {\r\n\r\n        if (players[0].turn !== turn) {\r\n            setErrorMessage(\"not your turn\");\r\n            return;\r\n        } else if (cards.length === 0) {\r\n            setErrorMessage(\"you need to select cards to play\");\r\n            return;\r\n        }\r\n\r\n        let isPlayable = areCardsPlayable(cards);\r\n        if (!isPlayable) {\r\n            setErrorMessage(\"you can't play those cards\");\r\n            return;\r\n        }\r\n\r\n        if (drawPile === 0) {\r\n            drawFromDiscardPile();\r\n            playCards(cards, players[turn]);\r\n        } else {\r\n            drawFromDrawStack();\r\n            playCards(cards, players[turn]);\r\n        }\r\n\r\n        setSelectedCards([]);\r\n    }\r\n\r\n    function handleCardClick(cards, card) {\r\n\r\n        if (discardPile.length > 0) {\r\n            let topCard = discardPile[discardPile.length - 1];\r\n\r\n            // slap down if clicked card was just picked up card from draw stack and matches discard pile top card\r\n            if (getCard(topCard).number === getCard(card).number &&\r\n                turn === getNextTurn(players[0].turn) &&\r\n                card === players[0].hand[players[0].hand.length - 1] &&\r\n                players[0].lastDrawPile === 2)\r\n            {\r\n                slapDownCard(card, players[0]);\r\n                return;\r\n            }\r\n\r\n            // slap down (add on) if adding to a straight\r\n            if (lastPlayedCards.length >= 3 && (topCard + 1) === card && getCard(topCard).number !== 'K')\r\n            {\r\n                slapDownCard(card, players[0]);\r\n                return;\r\n            }\r\n\r\n            // slap down (add on) if completing a set\r\n            if (lastPlayedCards.length + cards.length === 4) {\r\n                let combined = lastPlayedCards.concat(cards);\r\n                let allSame = true;\r\n                let firstNumber = getCard(combined[0]).number;\r\n                for (let i = 1; i < combined.length; i++) {\r\n                    if (getCard(combined[i]).number !== firstNumber) {\r\n                        allSame = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (allSame) {\r\n                    slapDownCard(cards, players[0]);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        // console.log('selectedCards: ' + cards);\r\n        setSelectedCards(cards);\r\n    }\r\n\r\n    function slapDownCard(card, player) {\r\n\r\n        let newDiscardPile;\r\n        let newPlayers;\r\n        let newSelectedCards;\r\n        let newLastPlayedCards;\r\n\r\n        // slap down is a set add-on\r\n        if (card.length > 1) {\r\n            let cards = card;\r\n\r\n            // add cards to the discard pile\r\n            newDiscardPile = discardPile.concat(cards);\r\n\r\n            // remove cards from the player's hand\r\n            let playerIndex = players.indexOf(player);\r\n            let newPlayer = players[playerIndex];\r\n            for (let i = 0; i < cards.length; i++) {\r\n                newPlayer.hand.splice(newPlayer.hand.indexOf(cards[i]), 1);\r\n            }\r\n\r\n            // update player points in hand\r\n            newPlayer.points = getPoints(newPlayer.hand);\r\n\r\n            // update overall player status\r\n            newPlayers = players;\r\n            newPlayers[playerIndex] = newPlayer;\r\n\r\n            // update selected cards\r\n            newSelectedCards = [];\r\n\r\n            // update last played cards pile\r\n            newLastPlayedCards = lastPlayedCards.concat(cards);\r\n        } else {\r\n            // add card to the discard pile\r\n            newDiscardPile = discardPile;\r\n            newDiscardPile.push(card);\r\n\r\n            // remove cards from the player's hand\r\n            let playerIndex = players.indexOf(player);\r\n            let newPlayer = players[playerIndex];\r\n            newPlayer.hand.splice(newPlayer.hand.indexOf(card), 1);\r\n\r\n            newPlayer.points = getPoints(newPlayer.hand);\r\n\r\n            newPlayers = players;\r\n            newPlayers[playerIndex] = newPlayer;\r\n\r\n            newSelectedCards = selectedCards;\r\n            if (newSelectedCards.includes(card)) {\r\n                newSelectedCards.splice(newSelectedCards.indexOf(card), 1);\r\n            }\r\n\r\n            newLastPlayedCards = lastPlayedCards;\r\n            newLastPlayedCards.push(card);\r\n        }\r\n\r\n        setDiscardPile(newDiscardPile);\r\n        setPlayers(newPlayers);\r\n        setErrorMessage('');\r\n        setSelectedCards(newSelectedCards);\r\n        setLastPlayedCards(newLastPlayedCards);\r\n\r\n        forceUpdate();\r\n    }\r\n\r\n    function playCards(cards, player) {\r\n        // add cards to the discard pile\r\n        let newCards = cards;\r\n        if (newCards.length > 1) {\r\n\r\n            let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\r\n            newCards.sort((a, b) => numberMap[getCard(a).number] - numberMap[getCard(b).number]);\r\n\r\n            // let convertedCards = getCards(newCards);\r\n            // if (getPoints([convertedCards[0]] > getPoints([convertedCards[convertedCards.length]]))) {\r\n            //     console.log(convertedCards[0]);\r\n            //     console.log(convertedCards[convertedCards.length]);\r\n            //     newCards.reverse();\r\n            // }\r\n        }\r\n\r\n        let newDiscardPile = discardPile;\r\n        newDiscardPile = newDiscardPile.concat(newCards);\r\n\r\n        // remove cards from the player's hand\r\n        let playerIndex = players.indexOf(player);\r\n        let newPlayer = players[playerIndex];\r\n\r\n        for (let i = 0; i < cards.length; i++) {\r\n            if (newPlayer.hand.includes(cards[i])) {\r\n                newPlayer.hand.splice(newPlayer.hand.indexOf(cards[i]), 1);\r\n            }\r\n        }\r\n\r\n        newPlayer.points = getPoints(newPlayer.hand);\r\n\r\n        let newPlayers = players;\r\n        newPlayers[playerIndex] = newPlayer;\r\n\r\n        // let fakeCards = [22,35,52];\r\n        // let numberMap = {0: 0, A: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, J: 11, Q: 12, K: 13};\r\n        // fakeCards.sort((a, b) => numberMap[getCard(a).number] - numberMap[getCard(b).number]);\r\n\r\n        setLastPlayedCards(newCards);\r\n        setDiscardPile(newDiscardPile);\r\n        setPlayers(newPlayers);\r\n        setErrorMessage('');\r\n        setTurn(getNextTurn(turn, players.length));\r\n    }\r\n\r\n    function drawFromDiscardPile() {\r\n        let newDiscardPile = discardPile;\r\n        const card = newDiscardPile.pop();\r\n        addCardToPlayerHand(card, players[turn], 1);\r\n\r\n        setDiscardPile(newDiscardPile);\r\n    }\r\n\r\n    function drawFromDrawStack() {\r\n        let newDrawStack = drawStack;\r\n        const card = newDrawStack.pop();\r\n        addCardToPlayerHand(card, players[turn], 2);\r\n\r\n        setDrawStack(newDrawStack);\r\n    }\r\n\r\n    function addCardToPlayerHand(card, player, drawPile) {\r\n        let playerIndex = players.indexOf(player);\r\n        let newPlayer = players[playerIndex];\r\n        newPlayer.hand.push(card);\r\n        newPlayer.lastDrawPile = drawPile;\r\n\r\n        let newPlayers = players;\r\n        newPlayers[playerIndex] = newPlayer;\r\n\r\n        setPlayers(newPlayers);\r\n    }\r\n\r\n    function handleAutoPlayClick() {\r\n        if (drawStack.length === 0) {\r\n            setErrorMessage(\"draw stack is empty\");\r\n            return;\r\n        }\r\n\r\n        let player = players[turn];\r\n\r\n        // auto call yaniv for the current player\r\n        if (player.points <= 5) {\r\n            // clearInterval();\r\n            callYaniv(player);\r\n            return;\r\n        }\r\n\r\n        // play the current player's \"best\" cards\r\n        let currentPlayerHand = player.hand;\r\n        const bestPlay = getBestPlay(currentPlayerHand, discardPile, 3);\r\n        bestPlay.drawPile === 1 ? drawFromDiscardPile() : drawFromDrawStack();\r\n        playCards(bestPlay.cards, player);\r\n    }\r\n\r\n    function handleYanivClick() {\r\n        // TODO: eventually will need to replace 0 with id of client player\r\n        callYaniv(players[0]);\r\n    }\r\n\r\n    function callYaniv(player) {\r\n        let yanivPlayer = player;\r\n\r\n        if (yanivPlayer.turn !== turn) {\r\n            setErrorMessage(\"not your turn\");\r\n            return;\r\n        }\r\n\r\n        let newPlayers = players;\r\n        let asafCalled = false;\r\n        for (let i = 0; i < newPlayers.length; i++) {\r\n            if (newPlayers[i] === yanivPlayer) {continue;}\r\n\r\n            let opponent = newPlayers[i];\r\n            if (opponent.points > yanivPlayer.points) {\r\n                opponent.score += opponent.points;\r\n            } else if (opponent.points <= yanivPlayer.points && !asafCalled) {\r\n                yanivPlayer.score += 35;\r\n                asafCalled = true;\r\n            }\r\n            newPlayers[i] = opponent;\r\n        }\r\n\r\n        // cut score in half if player reaches exactly 100 or 200\r\n        for (let i = 0; i < newPlayers.length; i++) {\r\n            if (newPlayers[i].score === 100 || newPlayers[i].score === 200) {\r\n                newPlayers[i].score = newPlayers[i].score / 2;\r\n            }\r\n        }\r\n\r\n        setPlayers(newPlayers);\r\n        setPaused(true);\r\n    }\r\n\r\n    function handleReadyClick() {\r\n\r\n        // check for game over\r\n        let gameOver = false;\r\n        for (let i = 0; i < players.length; i++) {\r\n            const player = players[i];\r\n            if (player.score > 200) {\r\n                gameOver = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // deal cards\r\n        let newPlayers = players;\r\n        let newDeal = deal(4);\r\n        for (let i = 0; i < newDeal.players.length; i++) {\r\n            newPlayers[i].hand = newDeal.players[i].hand;\r\n            newPlayers[i].points = newDeal.players[i].points;\r\n            if (gameOver) {\r\n                newPlayers[i].score = 0;\r\n            } else if (newPlayers[i].score === 100 || newPlayers[i].score === 200) {\r\n                newPlayers[i].score = newPlayers[i].score / 2;\r\n            }\r\n        }\r\n\r\n        setPlayers(newPlayers);\r\n        setDiscardPile([]);\r\n        setDrawStack(newDeal.deck);\r\n        setTurn(getNextTurn(turn, players.length));\r\n        setPaused(false);\r\n        setSelectedCards([]);\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-center flex-col bg-white\">\r\n            <div className=\"border-b-2 py-8\">\r\n                <OpponentList paused={paused} turn={turn} players={players} />\r\n            </div>\r\n            <div className=\"border-b-2 py-8\">\r\n                <PlayArea\r\n                    discardPile={discardPile}\r\n                    drawStack={drawStack}\r\n                    onDiscardPileClick={() => handleDiscardPileClick()}\r\n                    onDrawStackClick={() => handleDrawStackClick()}\r\n                    paused={paused}\r\n                    lastPlayedCards={lastPlayedCards}\r\n                />\r\n            </div>\r\n            <div className=\"py-8\">\r\n                <PlayerInput\r\n                    player={players[0]}\r\n                    errorMessage={errorMessage}\r\n                    turn={turn}\r\n                    onCardClick={(cards, card) => handleCardClick(cards, card)}\r\n                    onYanivClick={() => handleYanivClick()}\r\n                    onReadyClick={() => handleReadyClick()}\r\n                    selectedCards={selectedCards}\r\n                    paused={paused}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameBoard\r\n","import React from \"react\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction ChatSignIn(props) {\r\n\r\n    const auth = firebase.auth();\r\n\r\n    const signInWithGoogle = () => {\r\n        console.log('do the sign up');\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n        auth.signInWithPopup(provider);\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-4\">\r\n            <button onClick={signInWithGoogle} className=\"w-full px-4 py-1 rounded-md text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none\">\r\n                Sign in to chat\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatSignIn","import React from \"react\";\r\n\r\nfunction ChatMessage(props) {\r\n\r\n    const {text, uid} = props.message;\r\n\r\n    // const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\r\n\r\n    // return (\r\n    //     <div className={`message ${messageClass}`}>\r\n    //         <p>{text}</p>\r\n    //     </div>\r\n    // )\r\n\r\n    return (\r\n        <div className=\"px-4 py-1 border-b-1 border-gray-300\">\r\n            {/*<span className=\"text-green-600 pr-1\">{props.username}:</span>*/}\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatMessage","import React, {useState} from \"react\";\r\nimport ChatMessage from \"./ChatMessage\";\r\nimport firebase from \"firebase\";\r\nimport {useCollectionData} from \"react-firebase-hooks/firestore\";\r\n\r\nfunction ChatRoom(props) {\r\n\r\n    const auth = firebase.auth();\r\n    const firestore = firebase.firestore();\r\n    const messagesRef = firestore.collection('messages');\r\n    const query = messagesRef.orderBy('createdAt').limit(25);\r\n\r\n\r\n    const [messages] = useCollectionData(query, {idField: 'id'});\r\n    const [formValue, setFormValue] = useState('');\r\n\r\n    const sendMessage = async(e) => {\r\n        e.preventDefault();\r\n\r\n        const {uid} = auth.currentUser;\r\n\r\n        await messagesRef.add({\r\n            text: formValue,\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n            uid\r\n        })\r\n\r\n        setFormValue('');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"bg-indigo-500 p-4 text-white mb-2 w-full\">\r\n                Chat\r\n                {auth.currentUser && <button className=\"underline absolute right-4\" onClick={() => auth.signOut()}>Logout</button> }\r\n            </div>\r\n            {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\r\n            {/*<ChatMessage username=\"username\" message=\"test this message out please\" />*/}\r\n            {/*<ChatMessage username=\"anonymous turkey\" message=\"this is a long one lets try a long one give me a long one please with the new format please and thank you\" />*/}\r\n            <form onSubmit={sendMessage} className=\"p-4 absolute bottom-0 w-full\">\r\n                <input value={formValue} onChange={(e) => setFormValue(e.target.value)} className=\"p-1 w-full border-2 border-gray-300 focus:ring-indigo-500 focus:border-indigo-500\" type=\"text\" placeholder=\"Type a message...\" maxLength=\"250\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatRoom","import React from \"react\";\r\nimport firebase from \"firebase\";\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport {useAuthState} from \"react-firebase-hooks/auth\";\r\nimport ChatSignIn from \"./ChatSignIn\";\r\nimport ChatRoom from \"./ChatRoom\";\r\n\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp({\r\n        apiKey: \"AIzaSyAf6lVb7Fa8w2y4YF3CmwuAZdmHzkCXmYY\",\r\n        authDomain: \"yaniv-de8e1.firebaseapp.com\",\r\n        projectId: \"yaniv-de8e1\",\r\n        storageBucket: \"yaniv-de8e1.appspot.com\",\r\n        messagingSenderId: \"931495841814\",\r\n        appId: \"1:931495841814:web:77bffb9bc7cb69af76e537\"\r\n    })\r\n} else {\r\n    firebase.app();\r\n}\r\n\r\nconst auth = firebase.auth();\r\n\r\nfunction Chat() {\r\n    const [user] = useAuthState(auth);\r\n\r\n    return (\r\n        <div className=\"bg-gray-200 h-screen text-left relative border-r-2 border-indigo-500\">\r\n            <section>\r\n                {user ? <ChatRoom /> : <ChatSignIn />}\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;","import '../css/App.css';\nimport GameBoard from './GameBoard.js';\nimport Chat from \"./Chat\";\n\nfunction App() {\n  return (\n    <div className=\"App flex\">\n        <div className=\"w-1/5\">\n            <Chat />\n        </div>\n        <div className=\"w-4/5 flex items-center justify-center\">\n            <GameBoard />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}